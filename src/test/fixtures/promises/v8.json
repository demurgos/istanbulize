[
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise) {\nvar SomePromiseArray = Promise._SomePromiseArray;\nfunction any(promises) {\n    var ret = new SomePromiseArray(promises);\n    var promise = ret.promise();\n    ret.setHowMany(1);\n    ret.setUnwrap();\n    ret.init();\n    return promise;\n}\n\nPromise.any = function (promises) {\n    return any(promises);\n};\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "123",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/any.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 487,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 485,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 481,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "any",
          "ranges": [
            {
              "startOffset": 163,
              "endOffset": 348,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.any",
          "ranges": [
            {
              "startOffset": 364,
              "endOffset": 413,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.any",
          "ranges": [
            {
              "startOffset": 440,
              "endOffset": 477,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar firstLineError;\ntry {throw new Error(); } catch (e) {firstLineError = e;}\nvar schedule = require(\"./schedule\");\nvar Queue = require(\"./queue\");\nvar util = require(\"./util\");\n\nfunction Async() {\n    this._customScheduler = false;\n    this._isTickUsed = false;\n    this._lateQueue = new Queue(16);\n    this._normalQueue = new Queue(16);\n    this._haveDrainedQueues = false;\n    this._trampolineEnabled = true;\n    var self = this;\n    this.drainQueues = function () {\n        self._drainQueues();\n    };\n    this._schedule = schedule;\n}\n\nAsync.prototype.setScheduler = function(fn) {\n    var prev = this._schedule;\n    this._schedule = fn;\n    this._customScheduler = true;\n    return prev;\n};\n\nAsync.prototype.hasCustomScheduler = function() {\n    return this._customScheduler;\n};\n\nAsync.prototype.enableTrampoline = function() {\n    this._trampolineEnabled = true;\n};\n\nAsync.prototype.disableTrampolineIfNecessary = function() {\n    if (util.hasDevTools) {\n        this._trampolineEnabled = false;\n    }\n};\n\nAsync.prototype.haveItemsQueued = function () {\n    return this._isTickUsed || this._haveDrainedQueues;\n};\n\n\nAsync.prototype.fatalError = function(e, isNode) {\n    if (isNode) {\n        process.stderr.write(\"Fatal \" + (e instanceof Error ? e.stack : e) +\n            \"\\n\");\n        process.exit(2);\n    } else {\n        this.throwLater(e);\n    }\n};\n\nAsync.prototype.throwLater = function(fn, arg) {\n    if (arguments.length === 1) {\n        arg = fn;\n        fn = function () { throw arg; };\n    }\n    if (typeof setTimeout !== \"undefined\") {\n        setTimeout(function() {\n            fn(arg);\n        }, 0);\n    } else try {\n        this._schedule(function() {\n            fn(arg);\n        });\n    } catch (e) {\n        throw new Error(\"No async scheduler available\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n};\n\nfunction AsyncInvokeLater(fn, receiver, arg) {\n    this._lateQueue.push(fn, receiver, arg);\n    this._queueTick();\n}\n\nfunction AsyncInvoke(fn, receiver, arg) {\n    this._normalQueue.push(fn, receiver, arg);\n    this._queueTick();\n}\n\nfunction AsyncSettlePromises(promise) {\n    this._normalQueue._pushOne(promise);\n    this._queueTick();\n}\n\nif (!util.hasDevTools) {\n    Async.prototype.invokeLater = AsyncInvokeLater;\n    Async.prototype.invoke = AsyncInvoke;\n    Async.prototype.settlePromises = AsyncSettlePromises;\n} else {\n    Async.prototype.invokeLater = function (fn, receiver, arg) {\n        if (this._trampolineEnabled) {\n            AsyncInvokeLater.call(this, fn, receiver, arg);\n        } else {\n            this._schedule(function() {\n                setTimeout(function() {\n                    fn.call(receiver, arg);\n                }, 100);\n            });\n        }\n    };\n\n    Async.prototype.invoke = function (fn, receiver, arg) {\n        if (this._trampolineEnabled) {\n            AsyncInvoke.call(this, fn, receiver, arg);\n        } else {\n            this._schedule(function() {\n                fn.call(receiver, arg);\n            });\n        }\n    };\n\n    Async.prototype.settlePromises = function(promise) {\n        if (this._trampolineEnabled) {\n            AsyncSettlePromises.call(this, promise);\n        } else {\n            this._schedule(function() {\n                promise._settlePromises();\n            });\n        }\n    };\n}\n\nfunction _drainQueue(queue) {\n    while (queue.length() > 0) {\n        _drainQueueStep(queue);\n    }\n}\n\nfunction _drainQueueStep(queue) {\n    var fn = queue.shift();\n    if (typeof fn !== \"function\") {\n        fn._settlePromises();\n    } else {\n        var receiver = queue.shift();\n        var arg = queue.shift();\n        fn.call(receiver, arg);\n    }\n}\n\nAsync.prototype._drainQueues = function () {\n    _drainQueue(this._normalQueue);\n    this._reset();\n    this._haveDrainedQueues = true;\n    _drainQueue(this._lateQueue);\n};\n\nAsync.prototype._queueTick = function () {\n    if (!this._isTickUsed) {\n        this._isTickUsed = true;\n        this._schedule(this.drainQueues);\n    }\n};\n\nAsync.prototype._reset = function () {\n    this._isTickUsed = false;\n};\n\nmodule.exports = Async;\nmodule.exports.firstLineError = firstLineError;\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "68",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/async.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 4213,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 4211,
              "count": 1
            },
            {
              "startOffset": 119,
              "endOffset": 122,
              "count": 0
            },
            {
              "startOffset": 2434,
              "endOffset": 3374,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Async",
          "ranges": [
            {
              "startOffset": 255,
              "endOffset": 614,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Async.drainQueues",
          "ranges": [
            {
              "startOffset": 532,
              "endOffset": 580,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.setScheduler",
          "ranges": [
            {
              "startOffset": 647,
              "endOffset": 770,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.hasCustomScheduler",
          "ranges": [
            {
              "startOffset": 810,
              "endOffset": 858,
              "count": 1
            },
            {
              "startOffset": 856,
              "endOffset": 857,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Async.enableTrampoline",
          "ranges": [
            {
              "startOffset": 896,
              "endOffset": 946,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.disableTrampolineIfNecessary",
          "ranges": [
            {
              "startOffset": 996,
              "endOffset": 1085,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.haveItemsQueued",
          "ranges": [
            {
              "startOffset": 1122,
              "endOffset": 1193,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.fatalError",
          "ranges": [
            {
              "startOffset": 1226,
              "endOffset": 1435,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.throwLater",
          "ranges": [
            {
              "startOffset": 1467,
              "endOffset": 1913,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "AsyncInvokeLater",
          "ranges": [
            {
              "startOffset": 1916,
              "endOffset": 2032,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "AsyncInvoke",
          "ranges": [
            {
              "startOffset": 2034,
              "endOffset": 2147,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "AsyncSettlePromises",
          "ranges": [
            {
              "startOffset": 2149,
              "endOffset": 2254,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.invokeLater",
          "ranges": [
            {
              "startOffset": 2476,
              "endOffset": 2803,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.invoke",
          "ranges": [
            {
              "startOffset": 2835,
              "endOffset": 3088,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async.settlePromises",
          "ranges": [
            {
              "startOffset": 3128,
              "endOffset": 3371,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "_drainQueue",
          "ranges": [
            {
              "startOffset": 3376,
              "endOffset": 3478,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "_drainQueueStep",
          "ranges": [
            {
              "startOffset": 3480,
              "endOffset": 3731,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async._drainQueues",
          "ranges": [
            {
              "startOffset": 3764,
              "endOffset": 3904,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async._queueTick",
          "ranges": [
            {
              "startOffset": 3936,
              "endOffset": 4061,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Async._reset",
          "ranges": [
            {
              "startOffset": 4089,
              "endOffset": 4134,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {\nvar calledBind = false;\nvar rejectThis = function(_, e) {\n    this._reject(e);\n};\n\nvar targetRejected = function(e, context) {\n    context.promiseRejectionQueued = true;\n    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);\n};\n\nvar bindingResolved = function(thisArg, context) {\n    if (((this._bitField & 50397184) === 0)) {\n        this._resolveCallback(context.target);\n    }\n};\n\nvar bindingRejected = function(e, context) {\n    if (!context.promiseRejectionQueued) this._reject(e);\n};\n\nPromise.prototype.bind = function (thisArg) {\n    if (!calledBind) {\n        calledBind = true;\n        Promise.prototype._propagateFrom = debug.propagateFromFunction();\n        Promise.prototype._boundValue = debug.boundValueFunction();\n    }\n    var maybePromise = tryConvertToPromise(thisArg);\n    var ret = new Promise(INTERNAL);\n    ret._propagateFrom(this, 1);\n    var target = this._target();\n    ret._setBoundTo(maybePromise);\n    if (maybePromise instanceof Promise) {\n        var context = {\n            promiseRejectionQueued: false,\n            promise: ret,\n            target: target,\n            bindingPromise: maybePromise\n        };\n        target._then(INTERNAL, targetRejected, undefined, ret, context);\n        maybePromise._then(\n            bindingResolved, bindingRejected, undefined, ret, context);\n        ret._setOnCancel(maybePromise);\n    } else {\n        ret._resolveCallback(target);\n    }\n    return ret;\n};\n\nPromise.prototype._setBoundTo = function (obj) {\n    if (obj !== undefined) {\n        this._bitField = this._bitField | 2097152;\n        this._boundTo = obj;\n    } else {\n        this._bitField = this._bitField & (~2097152);\n    }\n};\n\nPromise.prototype._isBound = function () {\n    return (this._bitField & 2097152) === 2097152;\n};\n\nPromise.bind = function (thisArg, value) {\n    return Promise.resolve(value).bind(thisArg);\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "80",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/bind.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2036,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2034,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 2030,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "rejectThis",
          "ranges": [
            {
              "startOffset": 192,
              "endOffset": 231,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "targetRejected",
          "ranges": [
            {
              "startOffset": 255,
              "endOffset": 395,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "bindingResolved",
          "ranges": [
            {
              "startOffset": 420,
              "endOffset": 550,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "bindingRejected",
          "ranges": [
            {
              "startOffset": 575,
              "endOffset": 657,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.bind",
          "ranges": [
            {
              "startOffset": 685,
              "endOffset": 1598,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setBoundTo",
          "ranges": [
            {
              "startOffset": 1633,
              "endOffset": 1833,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isBound",
          "ranges": [
            {
              "startOffset": 1865,
              "endOffset": 1931,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.bind",
          "ranges": [
            {
              "startOffset": 1949,
              "endOffset": 2027,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar old;\nif (typeof Promise !== \"undefined\") old = Promise;\nfunction noConflict() {\n    try { if (Promise === bluebird) Promise = old; }\n    catch (e) {}\n    return bluebird;\n}\nvar bluebird = require(\"./promise\")();\nbluebird.noConflict = noConflict;\nmodule.exports = bluebird;\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "64",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/bluebird.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 357,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 355,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "noConflict",
          "ranges": [
            {
              "startOffset": 136,
              "endOffset": 252,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar cr = Object.create;\nif (cr) {\n    var callerCache = cr(null);\n    var getterCache = cr(null);\n    callerCache[\" size\"] = getterCache[\" size\"] = 0;\n}\n\nmodule.exports = function(Promise) {\nvar util = require(\"./util\");\nvar canEvaluate = util.canEvaluate;\nvar isIdentifier = util.isIdentifier;\n\nvar getMethodCaller;\nvar getGetter;\nif (!false) {\nvar makeMethodCaller = function (methodName) {\n    return new Function(\"ensureMethod\", \"                                    \\n\\\n        return function(obj) {                                               \\n\\\n            'use strict'                                                     \\n\\\n            var len = this.length;                                           \\n\\\n            ensureMethod(obj, 'methodName');                                 \\n\\\n            switch(len) {                                                    \\n\\\n                case 1: return obj.methodName(this[0]);                      \\n\\\n                case 2: return obj.methodName(this[0], this[1]);             \\n\\\n                case 3: return obj.methodName(this[0], this[1], this[2]);    \\n\\\n                case 0: return obj.methodName();                             \\n\\\n                default:                                                     \\n\\\n                    return obj.methodName.apply(obj, this);                  \\n\\\n            }                                                                \\n\\\n        };                                                                   \\n\\\n        \".replace(/methodName/g, methodName))(ensureMethod);\n};\n\nvar makeGetter = function (propertyName) {\n    return new Function(\"obj\", \"                                             \\n\\\n        'use strict';                                                        \\n\\\n        return obj.propertyName;                                             \\n\\\n        \".replace(\"propertyName\", propertyName));\n};\n\nvar getCompiled = function(name, compiler, cache) {\n    var ret = cache[name];\n    if (typeof ret !== \"function\") {\n        if (!isIdentifier(name)) {\n            return null;\n        }\n        ret = compiler(name);\n        cache[name] = ret;\n        cache[\" size\"]++;\n        if (cache[\" size\"] > 512) {\n            var keys = Object.keys(cache);\n            for (var i = 0; i < 256; ++i) delete cache[keys[i]];\n            cache[\" size\"] = keys.length - 256;\n        }\n    }\n    return ret;\n};\n\ngetMethodCaller = function(name) {\n    return getCompiled(name, makeMethodCaller, callerCache);\n};\n\ngetGetter = function(name) {\n    return getCompiled(name, makeGetter, getterCache);\n};\n}\n\nfunction ensureMethod(obj, methodName) {\n    var fn;\n    if (obj != null) fn = obj[methodName];\n    if (typeof fn !== \"function\") {\n        var message = \"Object \" + util.classString(obj) + \" has no method '\" +\n            util.toString(methodName) + \"'\";\n        throw new Promise.TypeError(message);\n    }\n    return fn;\n}\n\nfunction caller(obj) {\n    var methodName = this.pop();\n    var fn = ensureMethod(obj, methodName);\n    return fn.apply(obj, this);\n}\nPromise.prototype.call = function (methodName) {\n    var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];};\n    if (!false) {\n        if (canEvaluate) {\n            var maybeCaller = getMethodCaller(methodName);\n            if (maybeCaller !== null) {\n                return this._then(\n                    maybeCaller, undefined, undefined, args, undefined);\n            }\n        }\n    }\n    args.push(methodName);\n    return this._then(caller, undefined, undefined, args, undefined);\n};\n\nfunction namedGetter(obj) {\n    return obj[this];\n}\nfunction indexedGetter(obj) {\n    var index = +this;\n    if (index < 0) index = Math.max(0, index + obj.length);\n    return obj[index];\n}\nPromise.prototype.get = function (propertyName) {\n    var isIndex = (typeof propertyName === \"number\");\n    var getter;\n    if (!isIndex) {\n        if (canEvaluate) {\n            var maybeGetter = getGetter(propertyName);\n            getter = maybeGetter !== null ? maybeGetter : namedGetter;\n        } else {\n            getter = namedGetter;\n        }\n    } else {\n        getter = indexedGetter;\n    }\n    return this._then(getter, undefined, undefined, propertyName, undefined);\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "110",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/call_get.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 4421,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 4419,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 247,
              "endOffset": 4415,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeMethodCaller",
          "ranges": [
            {
              "startOffset": 445,
              "endOffset": 1665,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeGetter",
          "ranges": [
            {
              "startOffset": 1685,
              "endOffset": 2005,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCompiled",
          "ranges": [
            {
              "startOffset": 2026,
              "endOffset": 2502,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMethodCaller",
          "ranges": [
            {
              "startOffset": 2523,
              "endOffset": 2602,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getGetter",
          "ranges": [
            {
              "startOffset": 2617,
              "endOffset": 2690,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ensureMethod",
          "ranges": [
            {
              "startOffset": 2695,
              "endOffset": 3019,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "caller",
          "ranges": [
            {
              "startOffset": 3021,
              "endOffset": 3154,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.call",
          "ranges": [
            {
              "startOffset": 3180,
              "endOffset": 3735,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "namedGetter",
          "ranges": [
            {
              "startOffset": 3738,
              "endOffset": 3789,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "indexedGetter",
          "ranges": [
            {
              "startOffset": 3790,
              "endOffset": 3927,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.get",
          "ranges": [
            {
              "startOffset": 3952,
              "endOffset": 4412,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, PromiseArray, apiRejection, debug) {\nvar util = require(\"./util\");\nvar tryCatch = util.tryCatch;\nvar errorObj = util.errorObj;\nvar async = Promise._async;\n\nPromise.prototype[\"break\"] = Promise.prototype.cancel = function() {\n    if (!debug.cancellation()) return this._warn(\"cancellation is disabled\");\n\n    var promise = this;\n    var child = promise;\n    while (promise._isCancellable()) {\n        if (!promise._cancelBy(child)) {\n            if (child._isFollowing()) {\n                child._followee().cancel();\n            } else {\n                child._cancelBranched();\n            }\n            break;\n        }\n\n        var parent = promise._cancellationParent;\n        if (parent == null || !parent._isCancellable()) {\n            if (promise._isFollowing()) {\n                promise._followee().cancel();\n            } else {\n                promise._cancelBranched();\n            }\n            break;\n        } else {\n            if (promise._isFollowing()) promise._followee().cancel();\n            promise._setWillBeCancelled();\n            child = promise;\n            promise = parent;\n        }\n    }\n};\n\nPromise.prototype._branchHasCancelled = function() {\n    this._branchesRemainingToCancel--;\n};\n\nPromise.prototype._enoughBranchesHaveCancelled = function() {\n    return this._branchesRemainingToCancel === undefined ||\n           this._branchesRemainingToCancel <= 0;\n};\n\nPromise.prototype._cancelBy = function(canceller) {\n    if (canceller === this) {\n        this._branchesRemainingToCancel = 0;\n        this._invokeOnCancel();\n        return true;\n    } else {\n        this._branchHasCancelled();\n        if (this._enoughBranchesHaveCancelled()) {\n            this._invokeOnCancel();\n            return true;\n        }\n    }\n    return false;\n};\n\nPromise.prototype._cancelBranched = function() {\n    if (this._enoughBranchesHaveCancelled()) {\n        this._cancel();\n    }\n};\n\nPromise.prototype._cancel = function() {\n    if (!this._isCancellable()) return;\n    this._setCancelled();\n    async.invoke(this._cancelPromises, this, undefined);\n};\n\nPromise.prototype._cancelPromises = function() {\n    if (this._length() > 0) this._settlePromises();\n};\n\nPromise.prototype._unsetOnCancel = function() {\n    this._onCancelField = undefined;\n};\n\nPromise.prototype._isCancellable = function() {\n    return this.isPending() && !this._isCancelled();\n};\n\nPromise.prototype.isCancellable = function() {\n    return this.isPending() && !this.isCancelled();\n};\n\nPromise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {\n    if (util.isArray(onCancelCallback)) {\n        for (var i = 0; i < onCancelCallback.length; ++i) {\n            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);\n        }\n    } else if (onCancelCallback !== undefined) {\n        if (typeof onCancelCallback === \"function\") {\n            if (!internalOnly) {\n                var e = tryCatch(onCancelCallback).call(this._boundValue());\n                if (e === errorObj) {\n                    this._attachExtraTrace(e.e);\n                    async.throwLater(e.e);\n                }\n            }\n        } else {\n            onCancelCallback._resultCancelled(this);\n        }\n    }\n};\n\nPromise.prototype._invokeOnCancel = function() {\n    var onCancelCallback = this._onCancel();\n    this._unsetOnCancel();\n    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);\n};\n\nPromise.prototype._invokeInternalOnCancel = function() {\n    if (this._isCancellable()) {\n        this._doInvokeOnCancel(this._onCancel(), true);\n        this._unsetOnCancel();\n    }\n};\n\nPromise.prototype._resultCancelled = function() {\n    this.cancel();\n};\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "81",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/cancel.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 3773,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 3771,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 3767,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.break.Promise.cancel",
          "ranges": [
            {
              "startOffset": 323,
              "endOffset": 1233,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._branchHasCancelled",
          "ranges": [
            {
              "startOffset": 1276,
              "endOffset": 1329,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._enoughBranchesHaveCancelled",
          "ranges": [
            {
              "startOffset": 1381,
              "endOffset": 1504,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._cancelBy",
          "ranges": [
            {
              "startOffset": 1537,
              "endOffset": 1883,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._cancelBranched",
          "ranges": [
            {
              "startOffset": 1922,
              "endOffset": 2013,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._cancel",
          "ranges": [
            {
              "startOffset": 2044,
              "endOffset": 2181,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._cancelPromises",
          "ranges": [
            {
              "startOffset": 2220,
              "endOffset": 2286,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._unsetOnCancel",
          "ranges": [
            {
              "startOffset": 2324,
              "endOffset": 2375,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isCancellable",
          "ranges": [
            {
              "startOffset": 2413,
              "endOffset": 2480,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.isCancellable",
          "ranges": [
            {
              "startOffset": 2517,
              "endOffset": 2583,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._doInvokeOnCancel",
          "ranges": [
            {
              "startOffset": 2624,
              "endOffset": 3312,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._invokeOnCancel",
          "ranges": [
            {
              "startOffset": 3351,
              "endOffset": 3503,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._invokeInternalOnCancel",
          "ranges": [
            {
              "startOffset": 3550,
              "endOffset": 3690,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._resultCancelled",
          "ranges": [
            {
              "startOffset": 3730,
              "endOffset": 3763,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(NEXT_FILTER) {\nvar util = require(\"./util\");\nvar getKeys = require(\"./es5\").keys;\nvar tryCatch = util.tryCatch;\nvar errorObj = util.errorObj;\n\nfunction catchFilter(instances, cb, promise) {\n    return function(e) {\n        var boundTo = promise._boundValue();\n        predicateLoop: for (var i = 0; i < instances.length; ++i) {\n            var item = instances[i];\n\n            if (item === Error ||\n                (item != null && item.prototype instanceof Error)) {\n                if (e instanceof item) {\n                    return tryCatch(cb).call(boundTo, e);\n                }\n            } else if (typeof item === \"function\") {\n                var matchesPredicate = tryCatch(item).call(boundTo, e);\n                if (matchesPredicate === errorObj) {\n                    return matchesPredicate;\n                } else if (matchesPredicate) {\n                    return tryCatch(cb).call(boundTo, e);\n                }\n            } else if (util.isObject(e)) {\n                var keys = getKeys(item);\n                for (var j = 0; j < keys.length; ++j) {\n                    var key = keys[j];\n                    if (item[key] != e[key]) {\n                        continue predicateLoop;\n                    }\n                }\n                return tryCatch(cb).call(boundTo, e);\n            }\n        }\n        return NEXT_FILTER;\n    };\n}\n\nreturn catchFilter;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "77",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/catch_filter.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1492,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1490,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 1486,
              "count": 2
            },
            {
              "startOffset": 1484,
              "endOffset": 1485,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "catchFilter",
          "ranges": [
            {
              "startOffset": 245,
              "endOffset": 1463,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise) {\nvar longStackTraces = false;\nvar contextStack = [];\n\nPromise.prototype._promiseCreated = function() {};\nPromise.prototype._pushContext = function() {};\nPromise.prototype._popContext = function() {return null;};\nPromise._peekContext = Promise.prototype._peekContext = function() {};\n\nfunction Context() {\n    this._trace = new Context.CapturedTrace(peekContext());\n}\nContext.prototype._pushContext = function () {\n    if (this._trace !== undefined) {\n        this._trace._promiseCreated = null;\n        contextStack.push(this._trace);\n    }\n};\n\nContext.prototype._popContext = function () {\n    if (this._trace !== undefined) {\n        var trace = contextStack.pop();\n        var ret = trace._promiseCreated;\n        trace._promiseCreated = null;\n        return ret;\n    }\n    return null;\n};\n\nfunction createContext() {\n    if (longStackTraces) return new Context();\n}\n\nfunction peekContext() {\n    var lastIndex = contextStack.length - 1;\n    if (lastIndex >= 0) {\n        return contextStack[lastIndex];\n    }\n    return undefined;\n}\nContext.CapturedTrace = null;\nContext.create = createContext;\nContext.deactivateLongStackTraces = function() {};\nContext.activateLongStackTraces = function() {\n    var Promise_pushContext = Promise.prototype._pushContext;\n    var Promise_popContext = Promise.prototype._popContext;\n    var Promise_PeekContext = Promise._peekContext;\n    var Promise_peekContext = Promise.prototype._peekContext;\n    var Promise_promiseCreated = Promise.prototype._promiseCreated;\n    Context.deactivateLongStackTraces = function() {\n        Promise.prototype._pushContext = Promise_pushContext;\n        Promise.prototype._popContext = Promise_popContext;\n        Promise._peekContext = Promise_PeekContext;\n        Promise.prototype._peekContext = Promise_peekContext;\n        Promise.prototype._promiseCreated = Promise_promiseCreated;\n        longStackTraces = false;\n    };\n    longStackTraces = true;\n    Promise.prototype._pushContext = Context.prototype._pushContext;\n    Promise.prototype._popContext = Context.prototype._popContext;\n    Promise._peekContext = Promise.prototype._peekContext = peekContext;\n    Promise.prototype._promiseCreated = function() {\n        var ctx = this._peekContext();\n        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;\n    };\n};\nreturn Context;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "74",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/context.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2448,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2446,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 2442,
              "count": 1
            },
            {
              "startOffset": 2440,
              "endOffset": 2441,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._promiseCreated",
          "ranges": [
            {
              "startOffset": 202,
              "endOffset": 215,
              "count": 10
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._pushContext",
          "ranges": [
            {
              "startOffset": 250,
              "endOffset": 263,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._popContext",
          "ranges": [
            {
              "startOffset": 297,
              "endOffset": 322,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._peekContext.Promise._peekContext",
          "ranges": [
            {
              "startOffset": 380,
              "endOffset": 393,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Context",
          "ranges": [
            {
              "startOffset": 396,
              "endOffset": 478,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Context._pushContext",
          "ranges": [
            {
              "startOffset": 512,
              "endOffset": 654,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Context._popContext",
          "ranges": [
            {
              "startOffset": 689,
              "endOffset": 903,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "createContext",
          "ranges": [
            {
              "startOffset": 906,
              "endOffset": 981,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "peekContext",
          "ranges": [
            {
              "startOffset": 983,
              "endOffset": 1148,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Context.deactivateLongStackTraces",
          "ranges": [
            {
              "startOffset": 1247,
              "endOffset": 1260,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Context.activateLongStackTraces",
          "ranges": [
            {
              "startOffset": 1296,
              "endOffset": 2423,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, Context) {\nvar getDomain = Promise._getDomain;\nvar async = Promise._async;\nvar Warning = require(\"./errors\").Warning;\nvar util = require(\"./util\");\nvar es5 = require(\"./es5\");\nvar canAttachTrace = util.canAttachTrace;\nvar unhandledRejectionHandled;\nvar possiblyUnhandledRejection;\nvar bluebirdFramePattern =\n    /[\\\\\\/]bluebird[\\\\\\/]js[\\\\\\/](release|debug|instrumented)/;\nvar nodeFramePattern = /\\((?:timers\\.js):\\d+:\\d+\\)/;\nvar parseLinePattern = /[\\/<\\(](.+?):(\\d+):(\\d+)\\)?\\s*$/;\nvar stackFramePattern = null;\nvar formatStack = null;\nvar indentStackFrames = false;\nvar printWarning;\nvar debugging = !!(util.env(\"BLUEBIRD_DEBUG\") != 0 &&\n                        (false ||\n                         util.env(\"BLUEBIRD_DEBUG\") ||\n                         util.env(\"NODE_ENV\") === \"development\"));\n\nvar warnings = !!(util.env(\"BLUEBIRD_WARNINGS\") != 0 &&\n    (debugging || util.env(\"BLUEBIRD_WARNINGS\")));\n\nvar longStackTraces = !!(util.env(\"BLUEBIRD_LONG_STACK_TRACES\") != 0 &&\n    (debugging || util.env(\"BLUEBIRD_LONG_STACK_TRACES\")));\n\nvar wForgottenReturn = util.env(\"BLUEBIRD_W_FORGOTTEN_RETURN\") != 0 &&\n    (warnings || !!util.env(\"BLUEBIRD_W_FORGOTTEN_RETURN\"));\n\nPromise.prototype.suppressUnhandledRejections = function() {\n    var target = this._target();\n    target._bitField = ((target._bitField & (~1048576)) |\n                      524288);\n};\n\nPromise.prototype._ensurePossibleRejectionHandled = function () {\n    if ((this._bitField & 524288) !== 0) return;\n    this._setRejectionIsUnhandled();\n    var self = this;\n    setTimeout(function() {\n        self._notifyUnhandledRejection();\n    }, 1);\n};\n\nPromise.prototype._notifyUnhandledRejectionIsHandled = function () {\n    fireRejectionEvent(\"rejectionHandled\",\n                                  unhandledRejectionHandled, undefined, this);\n};\n\nPromise.prototype._setReturnedNonUndefined = function() {\n    this._bitField = this._bitField | 268435456;\n};\n\nPromise.prototype._returnedNonUndefined = function() {\n    return (this._bitField & 268435456) !== 0;\n};\n\nPromise.prototype._notifyUnhandledRejection = function () {\n    if (this._isRejectionUnhandled()) {\n        var reason = this._settledValue();\n        this._setUnhandledRejectionIsNotified();\n        fireRejectionEvent(\"unhandledRejection\",\n                                      possiblyUnhandledRejection, reason, this);\n    }\n};\n\nPromise.prototype._setUnhandledRejectionIsNotified = function () {\n    this._bitField = this._bitField | 262144;\n};\n\nPromise.prototype._unsetUnhandledRejectionIsNotified = function () {\n    this._bitField = this._bitField & (~262144);\n};\n\nPromise.prototype._isUnhandledRejectionNotified = function () {\n    return (this._bitField & 262144) > 0;\n};\n\nPromise.prototype._setRejectionIsUnhandled = function () {\n    this._bitField = this._bitField | 1048576;\n};\n\nPromise.prototype._unsetRejectionIsUnhandled = function () {\n    this._bitField = this._bitField & (~1048576);\n    if (this._isUnhandledRejectionNotified()) {\n        this._unsetUnhandledRejectionIsNotified();\n        this._notifyUnhandledRejectionIsHandled();\n    }\n};\n\nPromise.prototype._isRejectionUnhandled = function () {\n    return (this._bitField & 1048576) > 0;\n};\n\nPromise.prototype._warn = function(message, shouldUseOwnTrace, promise) {\n    return warn(message, shouldUseOwnTrace, promise || this);\n};\n\nPromise.onPossiblyUnhandledRejection = function (fn) {\n    var domain = getDomain();\n    possiblyUnhandledRejection =\n        typeof fn === \"function\" ? (domain === null ?\n                                            fn : util.domainBind(domain, fn))\n                                 : undefined;\n};\n\nPromise.onUnhandledRejectionHandled = function (fn) {\n    var domain = getDomain();\n    unhandledRejectionHandled =\n        typeof fn === \"function\" ? (domain === null ?\n                                            fn : util.domainBind(domain, fn))\n                                 : undefined;\n};\n\nvar disableLongStackTraces = function() {};\nPromise.longStackTraces = function () {\n    if (async.haveItemsQueued() && !config.longStackTraces) {\n        throw new Error(\"cannot enable long stack traces after promises have been created\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    if (!config.longStackTraces && longStackTracesIsSupported()) {\n        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;\n        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;\n        var Promise_dereferenceTrace = Promise.prototype._dereferenceTrace;\n        config.longStackTraces = true;\n        disableLongStackTraces = function() {\n            if (async.haveItemsQueued() && !config.longStackTraces) {\n                throw new Error(\"cannot enable long stack traces after promises have been created\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n            }\n            Promise.prototype._captureStackTrace = Promise_captureStackTrace;\n            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;\n            Promise.prototype._dereferenceTrace = Promise_dereferenceTrace;\n            Context.deactivateLongStackTraces();\n            async.enableTrampoline();\n            config.longStackTraces = false;\n        };\n        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;\n        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;\n        Promise.prototype._dereferenceTrace = longStackTracesDereferenceTrace;\n        Context.activateLongStackTraces();\n        async.disableTrampolineIfNecessary();\n    }\n};\n\nPromise.hasLongStackTraces = function () {\n    return config.longStackTraces && longStackTracesIsSupported();\n};\n\nvar fireDomEvent = (function() {\n    try {\n        if (typeof CustomEvent === \"function\") {\n            var event = new CustomEvent(\"CustomEvent\");\n            util.global.dispatchEvent(event);\n            return function(name, event) {\n                var eventData = {\n                    detail: event,\n                    cancelable: true\n                };\n                es5.defineProperty(\n                    eventData, \"promise\", {value: event.promise});\n                es5.defineProperty(eventData, \"reason\", {value: event.reason});\n                var domEvent = new CustomEvent(name.toLowerCase(), eventData);\n                return !util.global.dispatchEvent(domEvent);\n            };\n        } else if (typeof Event === \"function\") {\n            var event = new Event(\"CustomEvent\");\n            util.global.dispatchEvent(event);\n            return function(name, event) {\n                var domEvent = new Event(name.toLowerCase(), {\n                    cancelable: true\n                });\n                domEvent.detail = event;\n                es5.defineProperty(domEvent, \"promise\", {value: event.promise});\n                es5.defineProperty(domEvent, \"reason\", {value: event.reason});\n                return !util.global.dispatchEvent(domEvent);\n            };\n        } else {\n            var event = document.createEvent(\"CustomEvent\");\n            event.initCustomEvent(\"testingtheevent\", false, true, {});\n            util.global.dispatchEvent(event);\n            return function(name, event) {\n                var domEvent = document.createEvent(\"CustomEvent\");\n                domEvent.initCustomEvent(name.toLowerCase(), false, true,\n                    event);\n                return !util.global.dispatchEvent(domEvent);\n            };\n        }\n    } catch (e) {}\n    return function() {\n        return false;\n    };\n})();\n\nvar fireGlobalEvent = (function() {\n    if (util.isNode) {\n        return function() {\n            return process.emit.apply(process, arguments);\n        };\n    } else {\n        if (!util.global) {\n            return function() {\n                return false;\n            };\n        }\n        return function(name) {\n            var methodName = \"on\" + name.toLowerCase();\n            var method = util.global[methodName];\n            if (!method) return false;\n            method.apply(util.global, [].slice.call(arguments, 1));\n            return true;\n        };\n    }\n})();\n\nfunction generatePromiseLifecycleEventObject(name, promise) {\n    return {promise: promise};\n}\n\nvar eventToObjectGenerator = {\n    promiseCreated: generatePromiseLifecycleEventObject,\n    promiseFulfilled: generatePromiseLifecycleEventObject,\n    promiseRejected: generatePromiseLifecycleEventObject,\n    promiseResolved: generatePromiseLifecycleEventObject,\n    promiseCancelled: generatePromiseLifecycleEventObject,\n    promiseChained: function(name, promise, child) {\n        return {promise: promise, child: child};\n    },\n    warning: function(name, warning) {\n        return {warning: warning};\n    },\n    unhandledRejection: function (name, reason, promise) {\n        return {reason: reason, promise: promise};\n    },\n    rejectionHandled: generatePromiseLifecycleEventObject\n};\n\nvar activeFireEvent = function (name) {\n    var globalEventFired = false;\n    try {\n        globalEventFired = fireGlobalEvent.apply(null, arguments);\n    } catch (e) {\n        async.throwLater(e);\n        globalEventFired = true;\n    }\n\n    var domEventFired = false;\n    try {\n        domEventFired = fireDomEvent(name,\n                    eventToObjectGenerator[name].apply(null, arguments));\n    } catch (e) {\n        async.throwLater(e);\n        domEventFired = true;\n    }\n\n    return domEventFired || globalEventFired;\n};\n\nPromise.config = function(opts) {\n    opts = Object(opts);\n    if (\"longStackTraces\" in opts) {\n        if (opts.longStackTraces) {\n            Promise.longStackTraces();\n        } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {\n            disableLongStackTraces();\n        }\n    }\n    if (\"warnings\" in opts) {\n        var warningsOption = opts.warnings;\n        config.warnings = !!warningsOption;\n        wForgottenReturn = config.warnings;\n\n        if (util.isObject(warningsOption)) {\n            if (\"wForgottenReturn\" in warningsOption) {\n                wForgottenReturn = !!warningsOption.wForgottenReturn;\n            }\n        }\n    }\n    if (\"cancellation\" in opts && opts.cancellation && !config.cancellation) {\n        if (async.haveItemsQueued()) {\n            throw new Error(\n                \"cannot enable cancellation after promises are in use\");\n        }\n        Promise.prototype._clearCancellationData =\n            cancellationClearCancellationData;\n        Promise.prototype._propagateFrom = cancellationPropagateFrom;\n        Promise.prototype._onCancel = cancellationOnCancel;\n        Promise.prototype._setOnCancel = cancellationSetOnCancel;\n        Promise.prototype._attachCancellationCallback =\n            cancellationAttachCancellationCallback;\n        Promise.prototype._execute = cancellationExecute;\n        propagateFromFunction = cancellationPropagateFrom;\n        config.cancellation = true;\n    }\n    if (\"monitoring\" in opts) {\n        if (opts.monitoring && !config.monitoring) {\n            config.monitoring = true;\n            Promise.prototype._fireEvent = activeFireEvent;\n        } else if (!opts.monitoring && config.monitoring) {\n            config.monitoring = false;\n            Promise.prototype._fireEvent = defaultFireEvent;\n        }\n    }\n    return Promise;\n};\n\nfunction defaultFireEvent() { return false; }\n\nPromise.prototype._fireEvent = defaultFireEvent;\nPromise.prototype._execute = function(executor, resolve, reject) {\n    try {\n        executor(resolve, reject);\n    } catch (e) {\n        return e;\n    }\n};\nPromise.prototype._onCancel = function () {};\nPromise.prototype._setOnCancel = function (handler) { ; };\nPromise.prototype._attachCancellationCallback = function(onCancel) {\n    ;\n};\nPromise.prototype._captureStackTrace = function () {};\nPromise.prototype._attachExtraTrace = function () {};\nPromise.prototype._dereferenceTrace = function () {};\nPromise.prototype._clearCancellationData = function() {};\nPromise.prototype._propagateFrom = function (parent, flags) {\n    ;\n    ;\n};\n\nfunction cancellationExecute(executor, resolve, reject) {\n    var promise = this;\n    try {\n        executor(resolve, reject, function(onCancel) {\n            if (typeof onCancel !== \"function\") {\n                throw new TypeError(\"onCancel must be a function, got: \" +\n                                    util.toString(onCancel));\n            }\n            promise._attachCancellationCallback(onCancel);\n        });\n    } catch (e) {\n        return e;\n    }\n}\n\nfunction cancellationAttachCancellationCallback(onCancel) {\n    if (!this._isCancellable()) return this;\n\n    var previousOnCancel = this._onCancel();\n    if (previousOnCancel !== undefined) {\n        if (util.isArray(previousOnCancel)) {\n            previousOnCancel.push(onCancel);\n        } else {\n            this._setOnCancel([previousOnCancel, onCancel]);\n        }\n    } else {\n        this._setOnCancel(onCancel);\n    }\n}\n\nfunction cancellationOnCancel() {\n    return this._onCancelField;\n}\n\nfunction cancellationSetOnCancel(onCancel) {\n    this._onCancelField = onCancel;\n}\n\nfunction cancellationClearCancellationData() {\n    this._cancellationParent = undefined;\n    this._onCancelField = undefined;\n}\n\nfunction cancellationPropagateFrom(parent, flags) {\n    if ((flags & 1) !== 0) {\n        this._cancellationParent = parent;\n        var branchesRemainingToCancel = parent._branchesRemainingToCancel;\n        if (branchesRemainingToCancel === undefined) {\n            branchesRemainingToCancel = 0;\n        }\n        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;\n    }\n    if ((flags & 2) !== 0 && parent._isBound()) {\n        this._setBoundTo(parent._boundTo);\n    }\n}\n\nfunction bindingPropagateFrom(parent, flags) {\n    if ((flags & 2) !== 0 && parent._isBound()) {\n        this._setBoundTo(parent._boundTo);\n    }\n}\nvar propagateFromFunction = bindingPropagateFrom;\n\nfunction boundValueFunction() {\n    var ret = this._boundTo;\n    if (ret !== undefined) {\n        if (ret instanceof Promise) {\n            if (ret.isFulfilled()) {\n                return ret.value();\n            } else {\n                return undefined;\n            }\n        }\n    }\n    return ret;\n}\n\nfunction longStackTracesCaptureStackTrace() {\n    this._trace = new CapturedTrace(this._peekContext());\n}\n\nfunction longStackTracesAttachExtraTrace(error, ignoreSelf) {\n    if (canAttachTrace(error)) {\n        var trace = this._trace;\n        if (trace !== undefined) {\n            if (ignoreSelf) trace = trace._parent;\n        }\n        if (trace !== undefined) {\n            trace.attachExtraTrace(error);\n        } else if (!error.__stackCleaned__) {\n            var parsed = parseStackAndMessage(error);\n            util.notEnumerableProp(error, \"stack\",\n                parsed.message + \"\\n\" + parsed.stack.join(\"\\n\"));\n            util.notEnumerableProp(error, \"__stackCleaned__\", true);\n        }\n    }\n}\n\nfunction longStackTracesDereferenceTrace() {\n    this._trace = undefined;\n}\n\nfunction checkForgottenReturns(returnValue, promiseCreated, name, promise,\n                               parent) {\n    if (returnValue === undefined && promiseCreated !== null &&\n        wForgottenReturn) {\n        if (parent !== undefined && parent._returnedNonUndefined()) return;\n        if ((promise._bitField & 65535) === 0) return;\n\n        if (name) name = name + \" \";\n        var handlerLine = \"\";\n        var creatorLine = \"\";\n        if (promiseCreated._trace) {\n            var traceLines = promiseCreated._trace.stack.split(\"\\n\");\n            var stack = cleanStack(traceLines);\n            for (var i = stack.length - 1; i >= 0; --i) {\n                var line = stack[i];\n                if (!nodeFramePattern.test(line)) {\n                    var lineMatches = line.match(parseLinePattern);\n                    if (lineMatches) {\n                        handlerLine  = \"at \" + lineMatches[1] +\n                            \":\" + lineMatches[2] + \":\" + lineMatches[3] + \" \";\n                    }\n                    break;\n                }\n            }\n\n            if (stack.length > 0) {\n                var firstUserLine = stack[0];\n                for (var i = 0; i < traceLines.length; ++i) {\n\n                    if (traceLines[i] === firstUserLine) {\n                        if (i > 0) {\n                            creatorLine = \"\\n\" + traceLines[i - 1];\n                        }\n                        break;\n                    }\n                }\n\n            }\n        }\n        var msg = \"a promise was created in a \" + name +\n            \"handler \" + handlerLine + \"but was not returned from it, \" +\n            \"see http://goo.gl/rRqMUw\" +\n            creatorLine;\n        promise._warn(msg, true, promiseCreated);\n    }\n}\n\nfunction deprecated(name, replacement) {\n    var message = name +\n        \" is deprecated and will be removed in a future version.\";\n    if (replacement) message += \" Use \" + replacement + \" instead.\";\n    return warn(message);\n}\n\nfunction warn(message, shouldUseOwnTrace, promise) {\n    if (!config.warnings) return;\n    var warning = new Warning(message);\n    var ctx;\n    if (shouldUseOwnTrace) {\n        promise._attachExtraTrace(warning);\n    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {\n        ctx.attachExtraTrace(warning);\n    } else {\n        var parsed = parseStackAndMessage(warning);\n        warning.stack = parsed.message + \"\\n\" + parsed.stack.join(\"\\n\");\n    }\n\n    if (!activeFireEvent(\"warning\", warning)) {\n        formatAndLogError(warning, \"\", true);\n    }\n}\n\nfunction reconstructStack(message, stacks) {\n    for (var i = 0; i < stacks.length - 1; ++i) {\n        stacks[i].push(\"From previous event:\");\n        stacks[i] = stacks[i].join(\"\\n\");\n    }\n    if (i < stacks.length) {\n        stacks[i] = stacks[i].join(\"\\n\");\n    }\n    return message + \"\\n\" + stacks.join(\"\\n\");\n}\n\nfunction removeDuplicateOrEmptyJumps(stacks) {\n    for (var i = 0; i < stacks.length; ++i) {\n        if (stacks[i].length === 0 ||\n            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {\n            stacks.splice(i, 1);\n            i--;\n        }\n    }\n}\n\nfunction removeCommonRoots(stacks) {\n    var current = stacks[0];\n    for (var i = 1; i < stacks.length; ++i) {\n        var prev = stacks[i];\n        var currentLastIndex = current.length - 1;\n        var currentLastLine = current[currentLastIndex];\n        var commonRootMeetPoint = -1;\n\n        for (var j = prev.length - 1; j >= 0; --j) {\n            if (prev[j] === currentLastLine) {\n                commonRootMeetPoint = j;\n                break;\n            }\n        }\n\n        for (var j = commonRootMeetPoint; j >= 0; --j) {\n            var line = prev[j];\n            if (current[currentLastIndex] === line) {\n                current.pop();\n                currentLastIndex--;\n            } else {\n                break;\n            }\n        }\n        current = prev;\n    }\n}\n\nfunction cleanStack(stack) {\n    var ret = [];\n    for (var i = 0; i < stack.length; ++i) {\n        var line = stack[i];\n        var isTraceLine = \"    (No stack trace)\" === line ||\n            stackFramePattern.test(line);\n        var isInternalFrame = isTraceLine && shouldIgnore(line);\n        if (isTraceLine && !isInternalFrame) {\n            if (indentStackFrames && line.charAt(0) !== \" \") {\n                line = \"    \" + line;\n            }\n            ret.push(line);\n        }\n    }\n    return ret;\n}\n\nfunction stackFramesAsArray(error) {\n    var stack = error.stack.replace(/\\s+$/g, \"\").split(\"\\n\");\n    for (var i = 0; i < stack.length; ++i) {\n        var line = stack[i];\n        if (\"    (No stack trace)\" === line || stackFramePattern.test(line)) {\n            break;\n        }\n    }\n    if (i > 0 && error.name != \"SyntaxError\") {\n        stack = stack.slice(i);\n    }\n    return stack;\n}\n\nfunction parseStackAndMessage(error) {\n    var stack = error.stack;\n    var message = error.toString();\n    stack = typeof stack === \"string\" && stack.length > 0\n                ? stackFramesAsArray(error) : [\"    (No stack trace)\"];\n    return {\n        message: message,\n        stack: error.name == \"SyntaxError\" ? stack : cleanStack(stack)\n    };\n}\n\nfunction formatAndLogError(error, title, isSoft) {\n    if (typeof console !== \"undefined\") {\n        var message;\n        if (util.isObject(error)) {\n            var stack = error.stack;\n            message = title + formatStack(stack, error);\n        } else {\n            message = title + String(error);\n        }\n        if (typeof printWarning === \"function\") {\n            printWarning(message, isSoft);\n        } else if (typeof console.log === \"function\" ||\n            typeof console.log === \"object\") {\n            console.log(message);\n        }\n    }\n}\n\nfunction fireRejectionEvent(name, localHandler, reason, promise) {\n    var localEventFired = false;\n    try {\n        if (typeof localHandler === \"function\") {\n            localEventFired = true;\n            if (name === \"rejectionHandled\") {\n                localHandler(promise);\n            } else {\n                localHandler(reason, promise);\n            }\n        }\n    } catch (e) {\n        async.throwLater(e);\n    }\n\n    if (name === \"unhandledRejection\") {\n        if (!activeFireEvent(name, reason, promise) && !localEventFired) {\n            formatAndLogError(reason, \"Unhandled rejection \");\n        }\n    } else {\n        activeFireEvent(name, promise);\n    }\n}\n\nfunction formatNonError(obj) {\n    var str;\n    if (typeof obj === \"function\") {\n        str = \"[function \" +\n            (obj.name || \"anonymous\") +\n            \"]\";\n    } else {\n        str = obj && typeof obj.toString === \"function\"\n            ? obj.toString() : util.toString(obj);\n        var ruselessToString = /\\[object [a-zA-Z0-9$_]+\\]/;\n        if (ruselessToString.test(str)) {\n            try {\n                var newStr = JSON.stringify(obj);\n                str = newStr;\n            }\n            catch(e) {\n\n            }\n        }\n        if (str.length === 0) {\n            str = \"(empty array)\";\n        }\n    }\n    return (\"(<\" + snip(str) + \">, no stack trace)\");\n}\n\nfunction snip(str) {\n    var maxChars = 41;\n    if (str.length < maxChars) {\n        return str;\n    }\n    return str.substr(0, maxChars - 3) + \"...\";\n}\n\nfunction longStackTracesIsSupported() {\n    return typeof captureStackTrace === \"function\";\n}\n\nvar shouldIgnore = function() { return false; };\nvar parseLineInfoRegex = /[\\/<\\(]([^:\\/]+):(\\d+):(?:\\d+)\\)?\\s*$/;\nfunction parseLineInfo(line) {\n    var matches = line.match(parseLineInfoRegex);\n    if (matches) {\n        return {\n            fileName: matches[1],\n            line: parseInt(matches[2], 10)\n        };\n    }\n}\n\nfunction setBounds(firstLineError, lastLineError) {\n    if (!longStackTracesIsSupported()) return;\n    var firstStackLines = firstLineError.stack.split(\"\\n\");\n    var lastStackLines = lastLineError.stack.split(\"\\n\");\n    var firstIndex = -1;\n    var lastIndex = -1;\n    var firstFileName;\n    var lastFileName;\n    for (var i = 0; i < firstStackLines.length; ++i) {\n        var result = parseLineInfo(firstStackLines[i]);\n        if (result) {\n            firstFileName = result.fileName;\n            firstIndex = result.line;\n            break;\n        }\n    }\n    for (var i = 0; i < lastStackLines.length; ++i) {\n        var result = parseLineInfo(lastStackLines[i]);\n        if (result) {\n            lastFileName = result.fileName;\n            lastIndex = result.line;\n            break;\n        }\n    }\n    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||\n        firstFileName !== lastFileName || firstIndex >= lastIndex) {\n        return;\n    }\n\n    shouldIgnore = function(line) {\n        if (bluebirdFramePattern.test(line)) return true;\n        var info = parseLineInfo(line);\n        if (info) {\n            if (info.fileName === firstFileName &&\n                (firstIndex <= info.line && info.line <= lastIndex)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n\nfunction CapturedTrace(parent) {\n    this._parent = parent;\n    this._promisesCreated = 0;\n    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);\n    captureStackTrace(this, CapturedTrace);\n    if (length > 32) this.uncycle();\n}\nutil.inherits(CapturedTrace, Error);\nContext.CapturedTrace = CapturedTrace;\n\nCapturedTrace.prototype.uncycle = function() {\n    var length = this._length;\n    if (length < 2) return;\n    var nodes = [];\n    var stackToIndex = {};\n\n    for (var i = 0, node = this; node !== undefined; ++i) {\n        nodes.push(node);\n        node = node._parent;\n    }\n    length = this._length = i;\n    for (var i = length - 1; i >= 0; --i) {\n        var stack = nodes[i].stack;\n        if (stackToIndex[stack] === undefined) {\n            stackToIndex[stack] = i;\n        }\n    }\n    for (var i = 0; i < length; ++i) {\n        var currentStack = nodes[i].stack;\n        var index = stackToIndex[currentStack];\n        if (index !== undefined && index !== i) {\n            if (index > 0) {\n                nodes[index - 1]._parent = undefined;\n                nodes[index - 1]._length = 1;\n            }\n            nodes[i]._parent = undefined;\n            nodes[i]._length = 1;\n            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;\n\n            if (index < length - 1) {\n                cycleEdgeNode._parent = nodes[index + 1];\n                cycleEdgeNode._parent.uncycle();\n                cycleEdgeNode._length =\n                    cycleEdgeNode._parent._length + 1;\n            } else {\n                cycleEdgeNode._parent = undefined;\n                cycleEdgeNode._length = 1;\n            }\n            var currentChildLength = cycleEdgeNode._length + 1;\n            for (var j = i - 2; j >= 0; --j) {\n                nodes[j]._length = currentChildLength;\n                currentChildLength++;\n            }\n            return;\n        }\n    }\n};\n\nCapturedTrace.prototype.attachExtraTrace = function(error) {\n    if (error.__stackCleaned__) return;\n    this.uncycle();\n    var parsed = parseStackAndMessage(error);\n    var message = parsed.message;\n    var stacks = [parsed.stack];\n\n    var trace = this;\n    while (trace !== undefined) {\n        stacks.push(cleanStack(trace.stack.split(\"\\n\")));\n        trace = trace._parent;\n    }\n    removeCommonRoots(stacks);\n    removeDuplicateOrEmptyJumps(stacks);\n    util.notEnumerableProp(error, \"stack\", reconstructStack(message, stacks));\n    util.notEnumerableProp(error, \"__stackCleaned__\", true);\n};\n\nvar captureStackTrace = (function stackDetection() {\n    var v8stackFramePattern = /^\\s*at\\s*/;\n    var v8stackFormatter = function(stack, error) {\n        if (typeof stack === \"string\") return stack;\n\n        if (error.name !== undefined &&\n            error.message !== undefined) {\n            return error.toString();\n        }\n        return formatNonError(error);\n    };\n\n    if (typeof Error.stackTraceLimit === \"number\" &&\n        typeof Error.captureStackTrace === \"function\") {\n        Error.stackTraceLimit += 6;\n        stackFramePattern = v8stackFramePattern;\n        formatStack = v8stackFormatter;\n        var captureStackTrace = Error.captureStackTrace;\n\n        shouldIgnore = function(line) {\n            return bluebirdFramePattern.test(line);\n        };\n        return function(receiver, ignoreUntil) {\n            Error.stackTraceLimit += 6;\n            captureStackTrace(receiver, ignoreUntil);\n            Error.stackTraceLimit -= 6;\n        };\n    }\n    var err = new Error();\n\n    if (typeof err.stack === \"string\" &&\n        err.stack.split(\"\\n\")[0].indexOf(\"stackDetection@\") >= 0) {\n        stackFramePattern = /@/;\n        formatStack = v8stackFormatter;\n        indentStackFrames = true;\n        return function captureStackTrace(o) {\n            o.stack = new Error().stack;\n        };\n    }\n\n    var hasStackAfterThrow;\n    try { throw new Error(); }\n    catch(e) {\n        hasStackAfterThrow = (\"stack\" in e);\n    }\n    if (!(\"stack\" in err) && hasStackAfterThrow &&\n        typeof Error.stackTraceLimit === \"number\") {\n        stackFramePattern = v8stackFramePattern;\n        formatStack = v8stackFormatter;\n        return function captureStackTrace(o) {\n            Error.stackTraceLimit += 6;\n            try { throw new Error(); }\n            catch(e) { o.stack = e.stack; }\n            Error.stackTraceLimit -= 6;\n        };\n    }\n\n    formatStack = function(stack, error) {\n        if (typeof stack === \"string\") return stack;\n\n        if ((typeof error === \"object\" ||\n            typeof error === \"function\") &&\n            error.name !== undefined &&\n            error.message !== undefined) {\n            return error.toString();\n        }\n        return formatNonError(error);\n    };\n\n    return null;\n\n})([]);\n\nif (typeof console !== \"undefined\" && typeof console.warn !== \"undefined\") {\n    printWarning = function (message) {\n        console.warn(message);\n    };\n    if (util.isNode && process.stderr.isTTY) {\n        printWarning = function(message, isSoft) {\n            var color = isSoft ? \"\\u001b[33m\" : \"\\u001b[31m\";\n            console.warn(color + message + \"\\u001b[0m\\n\");\n        };\n    } else if (!util.isNode && typeof (new Error().stack) === \"string\") {\n        printWarning = function(message, isSoft) {\n            console.warn(\"%c\" + message,\n                        isSoft ? \"color: darkorange\" : \"color: red\");\n        };\n    }\n}\n\nvar config = {\n    warnings: warnings,\n    longStackTraces: false,\n    cancellation: false,\n    monitoring: false\n};\n\nif (longStackTraces) Promise.longStackTraces();\n\nreturn {\n    longStackTraces: function() {\n        return config.longStackTraces;\n    },\n    warnings: function() {\n        return config.warnings;\n    },\n    cancellation: function() {\n        return config.cancellation;\n    },\n    monitoring: function() {\n        return config.monitoring;\n    },\n    propagateFromFunction: function() {\n        return propagateFromFunction;\n    },\n    boundValueFunction: function() {\n        return boundValueFunction;\n    },\n    checkForgottenReturns: checkForgottenReturns,\n    setBounds: setBounds,\n    warn: warn,\n    deprecated: deprecated,\n    CapturedTrace: CapturedTrace,\n    fireDomEvent: fireDomEvent,\n    fireGlobalEvent: fireGlobalEvent\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "75",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/debuggability.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 30391,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 30389,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 30385,
              "count": 1
            },
            {
              "startOffset": 29087,
              "endOffset": 29277,
              "count": 0
            },
            {
              "startOffset": 29300,
              "endOffset": 29342,
              "count": 0
            },
            {
              "startOffset": 29344,
              "endOffset": 29524,
              "count": 0
            },
            {
              "startOffset": 29667,
              "endOffset": 29693,
              "count": 0
            },
            {
              "startOffset": 30383,
              "endOffset": 30384,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.suppressUnhandledRejections",
          "ranges": [
            {
              "startOffset": 1330,
              "endOffset": 1466,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._ensurePossibleRejectionHandled",
          "ranges": [
            {
              "startOffset": 1521,
              "endOffset": 1724,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._notifyUnhandledRejectionIsHandled",
          "ranges": [
            {
              "startOffset": 1782,
              "endOffset": 1919,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setReturnedNonUndefined",
          "ranges": [
            {
              "startOffset": 1967,
              "endOffset": 2030,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._returnedNonUndefined",
          "ranges": [
            {
              "startOffset": 2075,
              "endOffset": 2136,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._notifyUnhandledRejection",
          "ranges": [
            {
              "startOffset": 2185,
              "endOffset": 2468,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setUnhandledRejectionIsNotified",
          "ranges": [
            {
              "startOffset": 2524,
              "endOffset": 2585,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._unsetUnhandledRejectionIsNotified",
          "ranges": [
            {
              "startOffset": 2643,
              "endOffset": 2707,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isUnhandledRejectionNotified",
          "ranges": [
            {
              "startOffset": 2760,
              "endOffset": 2817,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setRejectionIsUnhandled",
          "ranges": [
            {
              "startOffset": 2865,
              "endOffset": 2927,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._unsetRejectionIsUnhandled",
          "ranges": [
            {
              "startOffset": 2977,
              "endOffset": 3198,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isRejectionUnhandled",
          "ranges": [
            {
              "startOffset": 3243,
              "endOffset": 3301,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._warn",
          "ranges": [
            {
              "startOffset": 3330,
              "endOffset": 3441,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.onPossiblyUnhandledRejection",
          "ranges": [
            {
              "startOffset": 3483,
              "endOffset": 3741,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.onUnhandledRejectionHandled",
          "ranges": [
            {
              "startOffset": 3782,
              "endOffset": 4039,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "disableLongStackTraces",
          "ranges": [
            {
              "startOffset": 4071,
              "endOffset": 4084,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.longStackTraces",
          "ranges": [
            {
              "startOffset": 4112,
              "endOffset": 5653,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.hasLongStackTraces",
          "ranges": [
            {
              "startOffset": 5685,
              "endOffset": 5767,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5790,
              "endOffset": 7623,
              "count": 1
            },
            {
              "startOffset": 5860,
              "endOffset": 7065,
              "count": 0
            },
            {
              "startOffset": 7549,
              "endOffset": 7556,
              "count": 0
            },
            {
              "startOffset": 7621,
              "endOffset": 7622,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5983,
              "endOffset": 6468,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6635,
              "endOffset": 7054,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7270,
              "endOffset": 7538,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7580,
              "endOffset": 7620,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7652,
              "endOffset": 8202,
              "count": 1
            },
            {
              "startOffset": 7785,
              "endOffset": 8201,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7703,
              "endOffset": 7784,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7846,
              "endOffset": 7902,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7929,
              "endOffset": 8193,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "generatePromiseLifecycleEventObject",
          "ranges": [
            {
              "startOffset": 8208,
              "endOffset": 8302,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "promiseChained",
          "ranges": [
            {
              "startOffset": 8646,
              "endOffset": 8733,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "warning",
          "ranges": [
            {
              "startOffset": 8748,
              "endOffset": 8814,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "unhandledRejection",
          "ranges": [
            {
              "startOffset": 8840,
              "endOffset": 8931,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "activeFireEvent",
          "ranges": [
            {
              "startOffset": 9017,
              "endOffset": 9522,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.config",
          "ranges": [
            {
              "startOffset": 9542,
              "endOffset": 11361,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultFireEvent",
          "ranges": [
            {
              "startOffset": 11364,
              "endOffset": 11409,
              "count": 11
            },
            {
              "startOffset": 11407,
              "endOffset": 11408,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._execute",
          "ranges": [
            {
              "startOffset": 11489,
              "endOffset": 11615,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._onCancel",
          "ranges": [
            {
              "startOffset": 11647,
              "endOffset": 11661,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setOnCancel",
          "ranges": [
            {
              "startOffset": 11696,
              "endOffset": 11720,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._attachCancellationCallback",
          "ranges": [
            {
              "startOffset": 11770,
              "endOffset": 11798,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._captureStackTrace",
          "ranges": [
            {
              "startOffset": 11839,
              "endOffset": 11853,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._attachExtraTrace",
          "ranges": [
            {
              "startOffset": 11893,
              "endOffset": 11907,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._dereferenceTrace",
          "ranges": [
            {
              "startOffset": 11947,
              "endOffset": 11961,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._clearCancellationData",
          "ranges": [
            {
              "startOffset": 12006,
              "endOffset": 12019,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._propagateFrom",
          "ranges": [
            {
              "startOffset": 12056,
              "endOffset": 12096,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellationExecute",
          "ranges": [
            {
              "startOffset": 12099,
              "endOffset": 12561,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellationAttachCancellationCallback",
          "ranges": [
            {
              "startOffset": 12563,
              "endOffset": 12992,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellationOnCancel",
          "ranges": [
            {
              "startOffset": 12994,
              "endOffset": 13061,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellationSetOnCancel",
          "ranges": [
            {
              "startOffset": 13063,
              "endOffset": 13145,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellationClearCancellationData",
          "ranges": [
            {
              "startOffset": 13147,
              "endOffset": 13274,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellationPropagateFrom",
          "ranges": [
            {
              "startOffset": 13276,
              "endOffset": 13764,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "bindingPropagateFrom",
          "ranges": [
            {
              "startOffset": 13766,
              "endOffset": 13913,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "boundValueFunction",
          "ranges": [
            {
              "startOffset": 13965,
              "endOffset": 14268,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "longStackTracesCaptureStackTrace",
          "ranges": [
            {
              "startOffset": 14270,
              "endOffset": 14375,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "longStackTracesAttachExtraTrace",
          "ranges": [
            {
              "startOffset": 14377,
              "endOffset": 14982,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "longStackTracesDereferenceTrace",
          "ranges": [
            {
              "startOffset": 14984,
              "endOffset": 15059,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkForgottenReturns",
          "ranges": [
            {
              "startOffset": 15061,
              "endOffset": 16817,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "deprecated",
          "ranges": [
            {
              "startOffset": 16819,
              "endOffset": 17048,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "warn",
          "ranges": [
            {
              "startOffset": 17050,
              "endOffset": 17623,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "reconstructStack",
          "ranges": [
            {
              "startOffset": 17625,
              "endOffset": 17941,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "removeDuplicateOrEmptyJumps",
          "ranges": [
            {
              "startOffset": 17943,
              "endOffset": 18217,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "removeCommonRoots",
          "ranges": [
            {
              "startOffset": 18219,
              "endOffset": 19006,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cleanStack",
          "ranges": [
            {
              "startOffset": 19008,
              "endOffset": 19520,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "stackFramesAsArray",
          "ranges": [
            {
              "startOffset": 19522,
              "endOffset": 19914,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "parseStackAndMessage",
          "ranges": [
            {
              "startOffset": 19916,
              "endOffset": 20268,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "formatAndLogError",
          "ranges": [
            {
              "startOffset": 20270,
              "endOffset": 20833,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "fireRejectionEvent",
          "ranges": [
            {
              "startOffset": 20835,
              "endOffset": 21512,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "formatNonError",
          "ranges": [
            {
              "startOffset": 21514,
              "endOffset": 22201,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "snip",
          "ranges": [
            {
              "startOffset": 22203,
              "endOffset": 22355,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "longStackTracesIsSupported",
          "ranges": [
            {
              "startOffset": 22357,
              "endOffset": 22450,
              "count": 1
            },
            {
              "startOffset": 22448,
              "endOffset": 22449,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "shouldIgnore",
          "ranges": [
            {
              "startOffset": 22471,
              "endOffset": 22499,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "parseLineInfo",
          "ranges": [
            {
              "startOffset": 22567,
              "endOffset": 22779,
              "count": 4
            },
            {
              "startOffset": 22665,
              "endOffset": 22777,
              "count": 2
            },
            {
              "startOffset": 22771,
              "endOffset": 22777,
              "count": 0
            },
            {
              "startOffset": 22777,
              "endOffset": 22778,
              "count": 2
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setBounds",
          "ranges": [
            {
              "startOffset": 22781,
              "endOffset": 24119,
              "count": 1
            },
            {
              "startOffset": 22872,
              "endOffset": 22879,
              "count": 0
            },
            {
              "startOffset": 23145,
              "endOffset": 23342,
              "count": 2
            },
            {
              "startOffset": 23223,
              "endOffset": 23336,
              "count": 1
            },
            {
              "startOffset": 23326,
              "endOffset": 23336,
              "count": 0
            },
            {
              "startOffset": 23336,
              "endOffset": 23342,
              "count": 1
            },
            {
              "startOffset": 23395,
              "endOffset": 23589,
              "count": 2
            },
            {
              "startOffset": 23472,
              "endOffset": 23583,
              "count": 1
            },
            {
              "startOffset": 23573,
              "endOffset": 23583,
              "count": 0
            },
            {
              "startOffset": 23583,
              "endOffset": 23589,
              "count": 1
            },
            {
              "startOffset": 23707,
              "endOffset": 23733,
              "count": 0
            },
            {
              "startOffset": 23752,
              "endOffset": 24118,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "shouldIgnore",
          "ranges": [
            {
              "startOffset": 23779,
              "endOffset": 24116,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "CapturedTrace",
          "ranges": [
            {
              "startOffset": 24121,
              "endOffset": 24375,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "CapturedTrace.uncycle",
          "ranges": [
            {
              "startOffset": 24487,
              "endOffset": 26026,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "CapturedTrace.attachExtraTrace",
          "ranges": [
            {
              "startOffset": 26072,
              "endOffset": 26628,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "stackDetection",
          "ranges": [
            {
              "startOffset": 26656,
              "endOffset": 28879,
              "count": 1
            },
            {
              "startOffset": 27598,
              "endOffset": 27738,
              "count": 0
            },
            {
              "startOffset": 27740,
              "endOffset": 28127,
              "count": 0
            },
            {
              "startOffset": 28128,
              "endOffset": 28180,
              "count": 0
            },
            {
              "startOffset": 28182,
              "endOffset": 28878,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "v8stackFormatter",
          "ranges": [
            {
              "startOffset": 26754,
              "endOffset": 27006,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "shouldIgnore",
          "ranges": [
            {
              "startOffset": 27325,
              "endOffset": 27403,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 27420,
              "endOffset": 27597,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "captureStackTrace",
          "ranges": [
            {
              "startOffset": 27864,
              "endOffset": 27946,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "captureStackTrace",
          "ranges": [
            {
              "startOffset": 28288,
              "endOffset": 28492,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "formatStack",
          "ranges": [
            {
              "startOffset": 28519,
              "endOffset": 28857,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "printWarning",
          "ranges": [
            {
              "startOffset": 28983,
              "endOffset": 29040,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "printWarning",
          "ranges": [
            {
              "startOffset": 29112,
              "endOffset": 29270,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "printWarning",
          "ranges": [
            {
              "startOffset": 29369,
              "endOffset": 29517,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "longStackTraces",
          "ranges": [
            {
              "startOffset": 29725,
              "endOffset": 29782,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "warnings",
          "ranges": [
            {
              "startOffset": 29798,
              "endOffset": 29848,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancellation",
          "ranges": [
            {
              "startOffset": 29868,
              "endOffset": 29922,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "monitoring",
          "ranges": [
            {
              "startOffset": 29940,
              "endOffset": 29992,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "propagateFromFunction",
          "ranges": [
            {
              "startOffset": 30021,
              "endOffset": 30077,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "boundValueFunction",
          "ranges": [
            {
              "startOffset": 30103,
              "endOffset": 30156,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise) {\nfunction returner() {\n    return this.value;\n}\nfunction thrower() {\n    throw this.reason;\n}\n\nPromise.prototype[\"return\"] =\nPromise.prototype.thenReturn = function (value) {\n    if (value instanceof Promise) value.suppressUnhandledRejections();\n    return this._then(\n        returner, undefined, undefined, {value: value}, undefined);\n};\n\nPromise.prototype[\"throw\"] =\nPromise.prototype.thenThrow = function (reason) {\n    return this._then(\n        thrower, undefined, undefined, {reason: reason}, undefined);\n};\n\nPromise.prototype.catchThrow = function (reason) {\n    if (arguments.length <= 1) {\n        return this._then(\n            undefined, thrower, undefined, {reason: reason}, undefined);\n    } else {\n        var _reason = arguments[1];\n        var handler = function() {throw _reason;};\n        return this.caught(reason, handler);\n    }\n};\n\nPromise.prototype.catchReturn = function (value) {\n    if (arguments.length <= 1) {\n        if (value instanceof Promise) value.suppressUnhandledRejections();\n        return this._then(\n            undefined, returner, undefined, {value: value}, undefined);\n    } else {\n        var _value = arguments[1];\n        if (_value instanceof Promise) _value.suppressUnhandledRejections();\n        var handler = function() {return _value;};\n        return this.caught(value, handler);\n    }\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "82",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/direct_resolve.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1461,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1459,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 1455,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "returner",
          "ranges": [
            {
              "startOffset": 113,
              "endOffset": 159,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "thrower",
          "ranges": [
            {
              "startOffset": 160,
              "endOffset": 205,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.return.Promise.thenReturn",
          "ranges": [
            {
              "startOffset": 268,
              "endOffset": 450,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.throw.Promise.thenThrow",
          "ranges": [
            {
              "startOffset": 512,
              "endOffset": 625,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.catchThrow",
          "ranges": [
            {
              "startOffset": 659,
              "endOffset": 964,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.catchReturn",
          "ranges": [
            {
              "startOffset": 999,
              "endOffset": 1452,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL) {\nvar PromiseReduce = Promise.reduce;\nvar PromiseAll = Promise.all;\n\nfunction promiseAllThis() {\n    return PromiseAll(this);\n}\n\nfunction PromiseMapSeries(promises, fn) {\n    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);\n}\n\nPromise.prototype.each = function (fn) {\n    return PromiseReduce(this, fn, INTERNAL, 0)\n              ._then(promiseAllThis, undefined, undefined, this, undefined);\n};\n\nPromise.prototype.mapSeries = function (fn) {\n    return PromiseReduce(this, fn, INTERNAL, INTERNAL);\n};\n\nPromise.each = function (promises, fn) {\n    return PromiseReduce(promises, fn, INTERNAL, 0)\n              ._then(promiseAllThis, undefined, undefined, promises, undefined);\n};\n\nPromise.mapSeries = PromiseMapSeries;\n};\n\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "122",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/each.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 855,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 853,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 848,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseAllThis",
          "ranges": [
            {
              "startOffset": 190,
              "endOffset": 248,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseMapSeries",
          "ranges": [
            {
              "startOffset": 250,
              "endOffset": 353,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.each",
          "ranges": [
            {
              "startOffset": 380,
              "endOffset": 522,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.mapSeries",
          "ranges": [
            {
              "startOffset": 555,
              "endOffset": 628,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.each",
          "ranges": [
            {
              "startOffset": 646,
              "endOffset": 806,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar es5 = require(\"./es5\");\nvar Objectfreeze = es5.freeze;\nvar util = require(\"./util\");\nvar inherits = util.inherits;\nvar notEnumerableProp = util.notEnumerableProp;\n\nfunction subError(nameProperty, defaultMessage) {\n    function SubError(message) {\n        if (!(this instanceof SubError)) return new SubError(message);\n        notEnumerableProp(this, \"message\",\n            typeof message === \"string\" ? message : defaultMessage);\n        notEnumerableProp(this, \"name\", nameProperty);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            Error.call(this);\n        }\n    }\n    inherits(SubError, Error);\n    return SubError;\n}\n\nvar _TypeError, _RangeError;\nvar Warning = subError(\"Warning\", \"warning\");\nvar CancellationError = subError(\"CancellationError\", \"cancellation error\");\nvar TimeoutError = subError(\"TimeoutError\", \"timeout error\");\nvar AggregateError = subError(\"AggregateError\", \"aggregate error\");\ntry {\n    _TypeError = TypeError;\n    _RangeError = RangeError;\n} catch(e) {\n    _TypeError = subError(\"TypeError\", \"type error\");\n    _RangeError = subError(\"RangeError\", \"range error\");\n}\n\nvar methods = (\"join pop push shift unshift slice filter forEach some \" +\n    \"every map indexOf lastIndexOf reduce reduceRight sort reverse\").split(\" \");\n\nfor (var i = 0; i < methods.length; ++i) {\n    if (typeof Array.prototype[methods[i]] === \"function\") {\n        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];\n    }\n}\n\nes5.defineProperty(AggregateError.prototype, \"length\", {\n    value: 0,\n    configurable: false,\n    writable: true,\n    enumerable: true\n});\nAggregateError.prototype[\"isOperational\"] = true;\nvar level = 0;\nAggregateError.prototype.toString = function() {\n    var indent = Array(level * 4 + 1).join(\" \");\n    var ret = \"\\n\" + indent + \"AggregateError of:\" + \"\\n\";\n    level++;\n    indent = Array(level * 4 + 1).join(\" \");\n    for (var i = 0; i < this.length; ++i) {\n        var str = this[i] === this ? \"[Circular AggregateError]\" : this[i] + \"\";\n        var lines = str.split(\"\\n\");\n        for (var j = 0; j < lines.length; ++j) {\n            lines[j] = indent + lines[j];\n        }\n        str = lines.join(\"\\n\");\n        ret += str + \"\\n\";\n    }\n    level--;\n    return ret;\n};\n\nfunction OperationalError(message) {\n    if (!(this instanceof OperationalError))\n        return new OperationalError(message);\n    notEnumerableProp(this, \"name\", \"OperationalError\");\n    notEnumerableProp(this, \"message\", message);\n    this.cause = message;\n    this[\"isOperational\"] = true;\n\n    if (message instanceof Error) {\n        notEnumerableProp(this, \"message\", message.message);\n        notEnumerableProp(this, \"stack\", message.stack);\n    } else if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n    }\n\n}\ninherits(OperationalError, Error);\n\nvar errorTypes = Error[\"__BluebirdErrorTypes__\"];\nif (!errorTypes) {\n    errorTypes = Objectfreeze({\n        CancellationError: CancellationError,\n        TimeoutError: TimeoutError,\n        OperationalError: OperationalError,\n        RejectionError: OperationalError,\n        AggregateError: AggregateError\n    });\n    es5.defineProperty(Error, \"__BluebirdErrorTypes__\", {\n        value: errorTypes,\n        writable: false,\n        enumerable: false,\n        configurable: false\n    });\n}\n\nmodule.exports = {\n    Error: Error,\n    TypeError: _TypeError,\n    RangeError: _RangeError,\n    CancellationError: errorTypes.CancellationError,\n    OperationalError: errorTypes.OperationalError,\n    TimeoutError: errorTypes.TimeoutError,\n    AggregateError: errorTypes.AggregateError,\n    Warning: Warning\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "71",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/errors.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 3783,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 3781,
              "count": 1
            },
            {
              "startOffset": 1131,
              "endOffset": 1254,
              "count": 0
            },
            {
              "startOffset": 1453,
              "endOffset": 1599,
              "count": 17
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "subError",
          "ranges": [
            {
              "startOffset": 244,
              "endOffset": 781,
              "count": 4
            },
            {
              "startOffset": 779,
              "endOffset": 780,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "SubError",
          "ranges": [
            {
              "startOffset": 298,
              "endOffset": 727,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "AggregateError.toString",
          "ranges": [
            {
              "startOffset": 1843,
              "endOffset": 2380,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "OperationalError",
          "ranges": [
            {
              "startOffset": 2383,
              "endOffset": 2939,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { var isES5 = (function(){\n    \"use strict\";\n    return this === undefined;\n})();\n\nif (isES5) {\n    module.exports = {\n        freeze: Object.freeze,\n        defineProperty: Object.defineProperty,\n        getDescriptor: Object.getOwnPropertyDescriptor,\n        keys: Object.keys,\n        names: Object.getOwnPropertyNames,\n        getPrototypeOf: Object.getPrototypeOf,\n        isArray: Array.isArray,\n        isES5: isES5,\n        propertyIsWritable: function(obj, prop) {\n            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n            return !!(!descriptor || descriptor.writable || descriptor.set);\n        }\n    };\n} else {\n    var has = {}.hasOwnProperty;\n    var str = {}.toString;\n    var proto = {}.constructor.prototype;\n\n    var ObjectKeys = function (o) {\n        var ret = [];\n        for (var key in o) {\n            if (has.call(o, key)) {\n                ret.push(key);\n            }\n        }\n        return ret;\n    };\n\n    var ObjectGetDescriptor = function(o, key) {\n        return {value: o[key]};\n    };\n\n    var ObjectDefineProperty = function (o, key, desc) {\n        o[key] = desc.value;\n        return o;\n    };\n\n    var ObjectFreeze = function (obj) {\n        return obj;\n    };\n\n    var ObjectGetPrototypeOf = function (obj) {\n        try {\n            return Object(obj).constructor.prototype;\n        }\n        catch (e) {\n            return proto;\n        }\n    };\n\n    var ArrayIsArray = function (obj) {\n        try {\n            return str.call(obj) === \"[object Array]\";\n        }\n        catch(e) {\n            return false;\n        }\n    };\n\n    module.exports = {\n        isArray: ArrayIsArray,\n        keys: ObjectKeys,\n        names: ObjectKeys,\n        defineProperty: ObjectDefineProperty,\n        getDescriptor: ObjectGetDescriptor,\n        freeze: ObjectFreeze,\n        getPrototypeOf: ObjectGetPrototypeOf,\n        isES5: isES5,\n        propertyIsWritable: function() {\n            return true;\n        }\n    };\n}\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "67",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/es5.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2044,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2042,
              "count": 1
            },
            {
              "startOffset": 702,
              "endOffset": 2039,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 75,
              "endOffset": 137,
              "count": 1
            },
            {
              "startOffset": 135,
              "endOffset": 136,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "propertyIsWritable",
          "ranges": [
            {
              "startOffset": 512,
              "endOffset": 693,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectKeys",
          "ranges": [
            {
              "startOffset": 834,
              "endOffset": 1016,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectGetDescriptor",
          "ranges": [
            {
              "startOffset": 1049,
              "endOffset": 1105,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectDefineProperty",
          "ranges": [
            {
              "startOffset": 1139,
              "endOffset": 1217,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectFreeze",
          "ranges": [
            {
              "startOffset": 1243,
              "endOffset": 1285,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectGetPrototypeOf",
          "ranges": [
            {
              "startOffset": 1319,
              "endOffset": 1475,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayIsArray",
          "ranges": [
            {
              "startOffset": 1501,
              "endOffset": 1657,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "propertyIsWritable",
          "ranges": [
            {
              "startOffset": 1983,
              "endOffset": 2030,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL) {\nvar PromiseMap = Promise.map;\n\nPromise.prototype.filter = function (fn, options) {\n    return PromiseMap(this, fn, options, INTERNAL);\n};\n\nPromise.filter = function (promises, fn, options) {\n    return PromiseMap(promises, fn, options, INTERNAL);\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "121",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/filter.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 380,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 378,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 374,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.filter",
          "ranges": [
            {
              "startOffset": 181,
              "endOffset": 259,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.filter",
          "ranges": [
            {
              "startOffset": 279,
              "endOffset": 371,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, tryConvertToPromise, NEXT_FILTER) {\nvar util = require(\"./util\");\nvar CancellationError = Promise.CancellationError;\nvar errorObj = util.errorObj;\nvar catchFilter = require(\"./catch_filter\")(NEXT_FILTER);\n\nfunction PassThroughHandlerContext(promise, type, handler) {\n    this.promise = promise;\n    this.type = type;\n    this.handler = handler;\n    this.called = false;\n    this.cancelPromise = null;\n}\n\nPassThroughHandlerContext.prototype.isFinallyHandler = function() {\n    return this.type === 0;\n};\n\nfunction FinallyHandlerCancelReaction(finallyHandler) {\n    this.finallyHandler = finallyHandler;\n}\n\nFinallyHandlerCancelReaction.prototype._resultCancelled = function() {\n    checkCancel(this.finallyHandler);\n};\n\nfunction checkCancel(ctx, reason) {\n    if (ctx.cancelPromise != null) {\n        if (arguments.length > 1) {\n            ctx.cancelPromise._reject(reason);\n        } else {\n            ctx.cancelPromise._cancel();\n        }\n        ctx.cancelPromise = null;\n        return true;\n    }\n    return false;\n}\n\nfunction succeed() {\n    return finallyHandler.call(this, this.promise._target()._settledValue());\n}\nfunction fail(reason) {\n    if (checkCancel(this, reason)) return;\n    errorObj.e = reason;\n    return errorObj;\n}\nfunction finallyHandler(reasonOrValue) {\n    var promise = this.promise;\n    var handler = this.handler;\n\n    if (!this.called) {\n        this.called = true;\n        var ret = this.isFinallyHandler()\n            ? handler.call(promise._boundValue())\n            : handler.call(promise._boundValue(), reasonOrValue);\n        if (ret === NEXT_FILTER) {\n            return ret;\n        } else if (ret !== undefined) {\n            promise._setReturnedNonUndefined();\n            var maybePromise = tryConvertToPromise(ret, promise);\n            if (maybePromise instanceof Promise) {\n                if (this.cancelPromise != null) {\n                    if (maybePromise._isCancelled()) {\n                        var reason =\n                            new CancellationError(\"late cancellation observer\");\n                        promise._attachExtraTrace(reason);\n                        errorObj.e = reason;\n                        return errorObj;\n                    } else if (maybePromise.isPending()) {\n                        maybePromise._attachCancellationCallback(\n                            new FinallyHandlerCancelReaction(this));\n                    }\n                }\n                return maybePromise._then(\n                    succeed, fail, undefined, this, undefined);\n            }\n        }\n    }\n\n    if (promise.isRejected()) {\n        checkCancel(this);\n        errorObj.e = reasonOrValue;\n        return errorObj;\n    } else {\n        checkCancel(this);\n        return reasonOrValue;\n    }\n}\n\nPromise.prototype._passThrough = function(handler, type, success, fail) {\n    if (typeof handler !== \"function\") return this.then();\n    return this._then(success,\n                      fail,\n                      undefined,\n                      new PassThroughHandlerContext(this, type, handler),\n                      undefined);\n};\n\nPromise.prototype.lastly =\nPromise.prototype[\"finally\"] = function (handler) {\n    return this._passThrough(handler,\n                             0,\n                             finallyHandler,\n                             finallyHandler);\n};\n\n\nPromise.prototype.tap = function (handler) {\n    return this._passThrough(handler, 1, finallyHandler);\n};\n\nPromise.prototype.tapCatch = function (handlerOrPredicate) {\n    var len = arguments.length;\n    if(len === 1) {\n        return this._passThrough(handlerOrPredicate,\n                                 1,\n                                 undefined,\n                                 finallyHandler);\n    } else {\n         var catchInstances = new Array(len - 1),\n            j = 0, i;\n        for (i = 0; i < len - 1; ++i) {\n            var item = arguments[i];\n            if (util.isObject(item)) {\n                catchInstances[j++] = item;\n            } else {\n                return Promise.reject(new TypeError(\n                    \"tapCatch statement predicate: \"\n                    + \"expecting an object but got \" + util.classString(item)\n                ));\n            }\n        }\n        catchInstances.length = j;\n        var handler = arguments[i];\n        return this._passThrough(catchFilter(catchInstances, handler, this),\n                                 1,\n                                 undefined,\n                                 finallyHandler);\n    }\n\n};\n\nreturn PassThroughHandlerContext;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "76",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/finally.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 4679,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 4677,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 4673,
              "count": 1
            },
            {
              "startOffset": 4671,
              "endOffset": 4672,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "PassThroughHandlerContext",
          "ranges": [
            {
              "startOffset": 317,
              "endOffset": 513,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PassThroughHandlerContext.isFinallyHandler",
          "ranges": [
            {
              "startOffset": 570,
              "endOffset": 612,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "FinallyHandlerCancelReaction",
          "ranges": [
            {
              "startOffset": 615,
              "endOffset": 714,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "FinallyHandlerCancelReaction._resultCancelled",
          "ranges": [
            {
              "startOffset": 774,
              "endOffset": 826,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkCancel",
          "ranges": [
            {
              "startOffset": 829,
              "endOffset": 1133,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "succeed",
          "ranges": [
            {
              "startOffset": 1135,
              "endOffset": 1235,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "fail",
          "ranges": [
            {
              "startOffset": 1236,
              "endOffset": 1350,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "finallyHandler",
          "ranges": [
            {
              "startOffset": 1351,
              "endOffset": 2868,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._passThrough",
          "ranges": [
            {
              "startOffset": 2903,
              "endOffset": 3204,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.lastly.Promise.finally",
          "ranges": [
            {
              "startOffset": 3265,
              "endOffset": 3448,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.tap",
          "ranges": [
            {
              "startOffset": 3476,
              "endOffset": 3556,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.tapCatch",
          "ranges": [
            {
              "startOffset": 3588,
              "endOffset": 4635,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise,\n                          apiRejection,\n                          INTERNAL,\n                          tryConvertToPromise,\n                          Proxyable,\n                          debug) {\nvar errors = require(\"./errors\");\nvar TypeError = errors.TypeError;\nvar util = require(\"./util\");\nvar errorObj = util.errorObj;\nvar tryCatch = util.tryCatch;\nvar yieldHandlers = [];\n\nfunction promiseFromYieldHandler(value, yieldHandlers, traceParent) {\n    for (var i = 0; i < yieldHandlers.length; ++i) {\n        traceParent._pushContext();\n        var result = tryCatch(yieldHandlers[i])(value);\n        traceParent._popContext();\n        if (result === errorObj) {\n            traceParent._pushContext();\n            var ret = Promise.reject(errorObj.e);\n            traceParent._popContext();\n            return ret;\n        }\n        var maybePromise = tryConvertToPromise(result, traceParent);\n        if (maybePromise instanceof Promise) return maybePromise;\n    }\n    return null;\n}\n\nfunction PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {\n    if (debug.cancellation()) {\n        var internal = new Promise(INTERNAL);\n        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);\n        this._promise = internal.lastly(function() {\n            return _finallyPromise;\n        });\n        internal._captureStackTrace();\n        internal._setOnCancel(this);\n    } else {\n        var promise = this._promise = new Promise(INTERNAL);\n        promise._captureStackTrace();\n    }\n    this._stack = stack;\n    this._generatorFunction = generatorFunction;\n    this._receiver = receiver;\n    this._generator = undefined;\n    this._yieldHandlers = typeof yieldHandler === \"function\"\n        ? [yieldHandler].concat(yieldHandlers)\n        : yieldHandlers;\n    this._yieldedPromise = null;\n    this._cancellationPhase = false;\n}\nutil.inherits(PromiseSpawn, Proxyable);\n\nPromiseSpawn.prototype._isResolved = function() {\n    return this._promise === null;\n};\n\nPromiseSpawn.prototype._cleanup = function() {\n    this._promise = this._generator = null;\n    if (debug.cancellation() && this._finallyPromise !== null) {\n        this._finallyPromise._fulfill();\n        this._finallyPromise = null;\n    }\n};\n\nPromiseSpawn.prototype._promiseCancelled = function() {\n    if (this._isResolved()) return;\n    var implementsReturn = typeof this._generator[\"return\"] !== \"undefined\";\n\n    var result;\n    if (!implementsReturn) {\n        var reason = new Promise.CancellationError(\n            \"generator .return() sentinel\");\n        Promise.coroutine.returnSentinel = reason;\n        this._promise._attachExtraTrace(reason);\n        this._promise._pushContext();\n        result = tryCatch(this._generator[\"throw\"]).call(this._generator,\n                                                         reason);\n        this._promise._popContext();\n    } else {\n        this._promise._pushContext();\n        result = tryCatch(this._generator[\"return\"]).call(this._generator,\n                                                          undefined);\n        this._promise._popContext();\n    }\n    this._cancellationPhase = true;\n    this._yieldedPromise = null;\n    this._continue(result);\n};\n\nPromiseSpawn.prototype._promiseFulfilled = function(value) {\n    this._yieldedPromise = null;\n    this._promise._pushContext();\n    var result = tryCatch(this._generator.next).call(this._generator, value);\n    this._promise._popContext();\n    this._continue(result);\n};\n\nPromiseSpawn.prototype._promiseRejected = function(reason) {\n    this._yieldedPromise = null;\n    this._promise._attachExtraTrace(reason);\n    this._promise._pushContext();\n    var result = tryCatch(this._generator[\"throw\"])\n        .call(this._generator, reason);\n    this._promise._popContext();\n    this._continue(result);\n};\n\nPromiseSpawn.prototype._resultCancelled = function() {\n    if (this._yieldedPromise instanceof Promise) {\n        var promise = this._yieldedPromise;\n        this._yieldedPromise = null;\n        promise.cancel();\n    }\n};\n\nPromiseSpawn.prototype.promise = function () {\n    return this._promise;\n};\n\nPromiseSpawn.prototype._run = function () {\n    this._generator = this._generatorFunction.call(this._receiver);\n    this._receiver =\n        this._generatorFunction = undefined;\n    this._promiseFulfilled(undefined);\n};\n\nPromiseSpawn.prototype._continue = function (result) {\n    var promise = this._promise;\n    if (result === errorObj) {\n        this._cleanup();\n        if (this._cancellationPhase) {\n            return promise.cancel();\n        } else {\n            return promise._rejectCallback(result.e, false);\n        }\n    }\n\n    var value = result.value;\n    if (result.done === true) {\n        this._cleanup();\n        if (this._cancellationPhase) {\n            return promise.cancel();\n        } else {\n            return promise._resolveCallback(value);\n        }\n    } else {\n        var maybePromise = tryConvertToPromise(value, this._promise);\n        if (!(maybePromise instanceof Promise)) {\n            maybePromise =\n                promiseFromYieldHandler(maybePromise,\n                                        this._yieldHandlers,\n                                        this._promise);\n            if (maybePromise === null) {\n                this._promiseRejected(\n                    new TypeError(\n                        \"A value %s was yielded that could not be treated as a promise\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\\u000a\".replace(\"%s\", String(value)) +\n                        \"From coroutine:\\u000a\" +\n                        this._stack.split(\"\\n\").slice(1, -7).join(\"\\n\")\n                    )\n                );\n                return;\n            }\n        }\n        maybePromise = maybePromise._target();\n        var bitField = maybePromise._bitField;\n        ;\n        if (((bitField & 50397184) === 0)) {\n            this._yieldedPromise = maybePromise;\n            maybePromise._proxy(this, null);\n        } else if (((bitField & 33554432) !== 0)) {\n            Promise._async.invoke(\n                this._promiseFulfilled, this, maybePromise._value()\n            );\n        } else if (((bitField & 16777216) !== 0)) {\n            Promise._async.invoke(\n                this._promiseRejected, this, maybePromise._reason()\n            );\n        } else {\n            this._promiseCancelled();\n        }\n    }\n};\n\nPromise.coroutine = function (generatorFunction, options) {\n    if (typeof generatorFunction !== \"function\") {\n        throw new TypeError(\"generatorFunction must be a function\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    var yieldHandler = Object(options).yieldHandler;\n    var PromiseSpawn$ = PromiseSpawn;\n    var stack = new Error().stack;\n    return function () {\n        var generator = generatorFunction.apply(this, arguments);\n        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,\n                                      stack);\n        var ret = spawn.promise();\n        spawn._generator = generator;\n        spawn._promiseFulfilled(undefined);\n        return ret;\n    };\n};\n\nPromise.coroutine.addYieldHandler = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"expecting a function but got \" + util.classString(fn));\n    }\n    yieldHandlers.push(fn);\n};\n\nPromise.spawn = function (generatorFunction) {\n    debug.deprecated(\"Promise.spawn()\", \"Promise.coroutine()\");\n    if (typeof generatorFunction !== \"function\") {\n        return apiRejection(\"generatorFunction must be a function\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    var spawn = new PromiseSpawn(generatorFunction, this);\n    var ret = spawn.promise();\n    spawn._run(Promise.spawn);\n    return ret;\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "113",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/generators.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 7827,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 7825,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 7821,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseFromYieldHandler",
          "ranges": [
            {
              "startOffset": 489,
              "endOffset": 1096,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn",
          "ranges": [
            {
              "startOffset": 1098,
              "endOffset": 1963,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._isResolved",
          "ranges": [
            {
              "startOffset": 2042,
              "endOffset": 2091,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._cleanup",
          "ranges": [
            {
              "startOffset": 2128,
              "endOffset": 2335,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._promiseCancelled",
          "ranges": [
            {
              "startOffset": 2381,
              "endOffset": 3302,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._promiseFulfilled",
          "ranges": [
            {
              "startOffset": 3348,
              "endOffset": 3573,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._promiseRejected",
          "ranges": [
            {
              "startOffset": 3618,
              "endOffset": 3903,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._resultCancelled",
          "ranges": [
            {
              "startOffset": 3948,
              "endOffset": 4126,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn.promise",
          "ranges": [
            {
              "startOffset": 4162,
              "endOffset": 4203,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._run",
          "ranges": [
            {
              "startOffset": 4236,
              "endOffset": 4424,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseSpawn._continue",
          "ranges": [
            {
              "startOffset": 4462,
              "endOffset": 6467,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.coroutine",
          "ranges": [
            {
              "startOffset": 6490,
              "endOffset": 7184,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.coroutine.addYieldHandler",
          "ranges": [
            {
              "startOffset": 7223,
              "endOffset": 7394,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.spawn",
          "ranges": [
            {
              "startOffset": 7413,
              "endOffset": 7818,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports =\nfunction(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async,\n         getDomain) {\nvar util = require(\"./util\");\nvar canEvaluate = util.canEvaluate;\nvar tryCatch = util.tryCatch;\nvar errorObj = util.errorObj;\nvar reject;\n\nif (!false) {\nif (canEvaluate) {\n    var thenCallback = function(i) {\n        return new Function(\"value\", \"holder\", \"                             \\n\\\n            'use strict';                                                    \\n\\\n            holder.pIndex = value;                                           \\n\\\n            holder.checkFulfillment(this);                                   \\n\\\n            \".replace(/Index/g, i));\n    };\n\n    var promiseSetter = function(i) {\n        return new Function(\"promise\", \"holder\", \"                           \\n\\\n            'use strict';                                                    \\n\\\n            holder.pIndex = promise;                                         \\n\\\n            \".replace(/Index/g, i));\n    };\n\n    var generateHolderClass = function(total) {\n        var props = new Array(total);\n        for (var i = 0; i < props.length; ++i) {\n            props[i] = \"this.p\" + (i+1);\n        }\n        var assignment = props.join(\" = \") + \" = null;\";\n        var cancellationCode= \"var promise;\\n\" + props.map(function(prop) {\n            return \"                                                         \\n\\\n                promise = \" + prop + \";                                      \\n\\\n                if (promise instanceof Promise) {                            \\n\\\n                    promise.cancel();                                        \\n\\\n                }                                                            \\n\\\n            \";\n        }).join(\"\\n\");\n        var passedArguments = props.join(\", \");\n        var name = \"Holder$\" + total;\n\n\n        var code = \"return function(tryCatch, errorObj, Promise, async) {    \\n\\\n            'use strict';                                                    \\n\\\n            function [TheName](fn) {                                         \\n\\\n                [TheProperties]                                              \\n\\\n                this.fn = fn;                                                \\n\\\n                this.asyncNeeded = true;                                     \\n\\\n                this.now = 0;                                                \\n\\\n            }                                                                \\n\\\n                                                                             \\n\\\n            [TheName].prototype._callFunction = function(promise) {          \\n\\\n                promise._pushContext();                                      \\n\\\n                var ret = tryCatch(this.fn)([ThePassedArguments]);           \\n\\\n                promise._popContext();                                       \\n\\\n                if (ret === errorObj) {                                      \\n\\\n                    promise._rejectCallback(ret.e, false);                   \\n\\\n                } else {                                                     \\n\\\n                    promise._resolveCallback(ret);                           \\n\\\n                }                                                            \\n\\\n            };                                                               \\n\\\n                                                                             \\n\\\n            [TheName].prototype.checkFulfillment = function(promise) {       \\n\\\n                var now = ++this.now;                                        \\n\\\n                if (now === [TheTotal]) {                                    \\n\\\n                    if (this.asyncNeeded) {                                  \\n\\\n                        async.invoke(this._callFunction, this, promise);     \\n\\\n                    } else {                                                 \\n\\\n                        this._callFunction(promise);                         \\n\\\n                    }                                                        \\n\\\n                                                                             \\n\\\n                }                                                            \\n\\\n            };                                                               \\n\\\n                                                                             \\n\\\n            [TheName].prototype._resultCancelled = function() {              \\n\\\n                [CancellationCode]                                           \\n\\\n            };                                                               \\n\\\n                                                                             \\n\\\n            return [TheName];                                                \\n\\\n        }(tryCatch, errorObj, Promise, async);                               \\n\\\n        \";\n\n        code = code.replace(/\\[TheName\\]/g, name)\n            .replace(/\\[TheTotal\\]/g, total)\n            .replace(/\\[ThePassedArguments\\]/g, passedArguments)\n            .replace(/\\[TheProperties\\]/g, assignment)\n            .replace(/\\[CancellationCode\\]/g, cancellationCode);\n\n        return new Function(\"tryCatch\", \"errorObj\", \"Promise\", \"async\", code)\n                           (tryCatch, errorObj, Promise, async);\n    };\n\n    var holderClasses = [];\n    var thenCallbacks = [];\n    var promiseSetters = [];\n\n    for (var i = 0; i < 8; ++i) {\n        holderClasses.push(generateHolderClass(i + 1));\n        thenCallbacks.push(thenCallback(i + 1));\n        promiseSetters.push(promiseSetter(i + 1));\n    }\n\n    reject = function (reason) {\n        this._reject(reason);\n    };\n}}\n\nPromise.join = function () {\n    var last = arguments.length - 1;\n    var fn;\n    if (last > 0 && typeof arguments[last] === \"function\") {\n        fn = arguments[last];\n        if (!false) {\n            if (last <= 8 && canEvaluate) {\n                var ret = new Promise(INTERNAL);\n                ret._captureStackTrace();\n                var HolderClass = holderClasses[last - 1];\n                var holder = new HolderClass(fn);\n                var callbacks = thenCallbacks;\n\n                for (var i = 0; i < last; ++i) {\n                    var maybePromise = tryConvertToPromise(arguments[i], ret);\n                    if (maybePromise instanceof Promise) {\n                        maybePromise = maybePromise._target();\n                        var bitField = maybePromise._bitField;\n                        ;\n                        if (((bitField & 50397184) === 0)) {\n                            maybePromise._then(callbacks[i], reject,\n                                               undefined, ret, holder);\n                            promiseSetters[i](maybePromise, holder);\n                            holder.asyncNeeded = false;\n                        } else if (((bitField & 33554432) !== 0)) {\n                            callbacks[i].call(ret,\n                                              maybePromise._value(), holder);\n                        } else if (((bitField & 16777216) !== 0)) {\n                            ret._reject(maybePromise._reason());\n                        } else {\n                            ret._cancel();\n                        }\n                    } else {\n                        callbacks[i].call(ret, maybePromise, holder);\n                    }\n                }\n\n                if (!ret._isFateSealed()) {\n                    if (holder.asyncNeeded) {\n                        var domain = getDomain();\n                        if (domain !== null) {\n                            holder.fn = util.domainBind(domain, holder.fn);\n                        }\n                    }\n                    ret._setAsyncGuaranteed();\n                    ret._setOnCancel(holder);\n                }\n                return ret;\n            }\n        }\n    }\n    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) {args[$_i] = arguments[$_i];};\n    if (fn) args.pop();\n    var ret = new PromiseArray(args).promise();\n    return fn !== undefined ? ret.spread(fn) : ret;\n};\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "84",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/join.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 8284,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 8282,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 8278,
              "count": 1
            },
            {
              "startOffset": 5579,
              "endOffset": 5742,
              "count": 8
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "thenCallback",
          "ranges": [
            {
              "startOffset": 380,
              "endOffset": 760,
              "count": 8
            },
            {
              "startOffset": 754,
              "endOffset": 759,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseSetter",
          "ranges": [
            {
              "startOffset": 787,
              "endOffset": 1086,
              "count": 8
            },
            {
              "startOffset": 1080,
              "endOffset": 1085,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateHolderClass",
          "ranges": [
            {
              "startOffset": 1119,
              "endOffset": 5458,
              "count": 8
            },
            {
              "startOffset": 1222,
              "endOffset": 1274,
              "count": 36
            },
            {
              "startOffset": 5452,
              "endOffset": 5457,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1391,
              "endOffset": 1837,
              "count": 36
            },
            {
              "startOffset": 1827,
              "endOffset": 1836,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "reject",
          "ranges": [
            {
              "startOffset": 5757,
              "endOffset": 5812,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.join",
          "ranges": [
            {
              "startOffset": 5833,
              "endOffset": 8274,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise,\n                          PromiseArray,\n                          apiRejection,\n                          tryConvertToPromise,\n                          INTERNAL,\n                          debug) {\nvar getDomain = Promise._getDomain;\nvar util = require(\"./util\");\nvar tryCatch = util.tryCatch;\nvar errorObj = util.errorObj;\nvar async = Promise._async;\n\nfunction MappingPromiseArray(promises, fn, limit, _filter) {\n    this.constructor$(promises);\n    this._promise._captureStackTrace();\n    var domain = getDomain();\n    this._callback = domain === null ? fn : util.domainBind(domain, fn);\n    this._preservedValues = _filter === INTERNAL\n        ? new Array(this.length())\n        : null;\n    this._limit = limit;\n    this._inFlight = 0;\n    this._queue = [];\n    async.invoke(this._asyncInit, this, undefined);\n}\nutil.inherits(MappingPromiseArray, PromiseArray);\n\nMappingPromiseArray.prototype._asyncInit = function() {\n    this._init$(undefined, -2);\n};\n\nMappingPromiseArray.prototype._init = function () {};\n\nMappingPromiseArray.prototype._promiseFulfilled = function (value, index) {\n    var values = this._values;\n    var length = this.length();\n    var preservedValues = this._preservedValues;\n    var limit = this._limit;\n\n    if (index < 0) {\n        index = (index * -1) - 1;\n        values[index] = value;\n        if (limit >= 1) {\n            this._inFlight--;\n            this._drainQueue();\n            if (this._isResolved()) return true;\n        }\n    } else {\n        if (limit >= 1 && this._inFlight >= limit) {\n            values[index] = value;\n            this._queue.push(index);\n            return false;\n        }\n        if (preservedValues !== null) preservedValues[index] = value;\n\n        var promise = this._promise;\n        var callback = this._callback;\n        var receiver = promise._boundValue();\n        promise._pushContext();\n        var ret = tryCatch(callback).call(receiver, value, index, length);\n        var promiseCreated = promise._popContext();\n        debug.checkForgottenReturns(\n            ret,\n            promiseCreated,\n            preservedValues !== null ? \"Promise.filter\" : \"Promise.map\",\n            promise\n        );\n        if (ret === errorObj) {\n            this._reject(ret.e);\n            return true;\n        }\n\n        var maybePromise = tryConvertToPromise(ret, this._promise);\n        if (maybePromise instanceof Promise) {\n            maybePromise = maybePromise._target();\n            var bitField = maybePromise._bitField;\n            ;\n            if (((bitField & 50397184) === 0)) {\n                if (limit >= 1) this._inFlight++;\n                values[index] = maybePromise;\n                maybePromise._proxy(this, (index + 1) * -1);\n                return false;\n            } else if (((bitField & 33554432) !== 0)) {\n                ret = maybePromise._value();\n            } else if (((bitField & 16777216) !== 0)) {\n                this._reject(maybePromise._reason());\n                return true;\n            } else {\n                this._cancel();\n                return true;\n            }\n        }\n        values[index] = ret;\n    }\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= length) {\n        if (preservedValues !== null) {\n            this._filter(values, preservedValues);\n        } else {\n            this._resolve(values);\n        }\n        return true;\n    }\n    return false;\n};\n\nMappingPromiseArray.prototype._drainQueue = function () {\n    var queue = this._queue;\n    var limit = this._limit;\n    var values = this._values;\n    while (queue.length > 0 && this._inFlight < limit) {\n        if (this._isResolved()) return;\n        var index = queue.pop();\n        this._promiseFulfilled(values[index], index);\n    }\n};\n\nMappingPromiseArray.prototype._filter = function (booleans, values) {\n    var len = values.length;\n    var ret = new Array(len);\n    var j = 0;\n    for (var i = 0; i < len; ++i) {\n        if (booleans[i]) ret[j++] = values[i];\n    }\n    ret.length = j;\n    this._resolve(ret);\n};\n\nMappingPromiseArray.prototype.preservedValues = function () {\n    return this._preservedValues;\n};\n\nfunction map(promises, fn, options, _filter) {\n    if (typeof fn !== \"function\") {\n        return apiRejection(\"expecting a function but got \" + util.classString(fn));\n    }\n\n    var limit = 0;\n    if (options !== undefined) {\n        if (typeof options === \"object\" && options !== null) {\n            if (typeof options.concurrency !== \"number\") {\n                return Promise.reject(\n                    new TypeError(\"'concurrency' must be a number but it is \" +\n                                    util.classString(options.concurrency)));\n            }\n            limit = options.concurrency;\n        } else {\n            return Promise.reject(new TypeError(\n                            \"options argument must be an object but it is \" +\n                             util.classString(options)));\n        }\n    }\n    limit = typeof limit === \"number\" &&\n        isFinite(limit) && limit >= 1 ? limit : 0;\n    return new MappingPromiseArray(promises, fn, limit, _filter).promise();\n}\n\nPromise.prototype.map = function (fn, options) {\n    return map(this, fn, options, null);\n};\n\nPromise.map = function (promises, fn, options, _filter) {\n    return map(promises, fn, options, _filter);\n};\n\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "109",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/map.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 5443,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 5441,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 5437,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "MappingPromiseArray",
          "ranges": [
            {
              "startOffset": 464,
              "endOffset": 925,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "MappingPromiseArray._asyncInit",
          "ranges": [
            {
              "startOffset": 1020,
              "endOffset": 1066,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "MappingPromiseArray._init",
          "ranges": [
            {
              "startOffset": 1107,
              "endOffset": 1121,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "MappingPromiseArray._promiseFulfilled",
          "ranges": [
            {
              "startOffset": 1174,
              "endOffset": 3517,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "MappingPromiseArray._drainQueue",
          "ranges": [
            {
              "startOffset": 3564,
              "endOffset": 3858,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "MappingPromiseArray._filter",
          "ranges": [
            {
              "startOffset": 3901,
              "endOffset": 4139,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "MappingPromiseArray.preservedValues",
          "ranges": [
            {
              "startOffset": 4190,
              "endOffset": 4239,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "map",
          "ranges": [
            {
              "startOffset": 4242,
              "endOffset": 5229,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.map",
          "ranges": [
            {
              "startOffset": 5255,
              "endOffset": 5322,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.map",
          "ranges": [
            {
              "startOffset": 5339,
              "endOffset": 5432,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports =\nfunction(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {\nvar util = require(\"./util\");\nvar tryCatch = util.tryCatch;\n\nPromise.method = function (fn) {\n    if (typeof fn !== \"function\") {\n        throw new Promise.TypeError(\"expecting a function but got \" + util.classString(fn));\n    }\n    return function () {\n        var ret = new Promise(INTERNAL);\n        ret._captureStackTrace();\n        ret._pushContext();\n        var value = tryCatch(fn).apply(this, arguments);\n        var promiseCreated = ret._popContext();\n        debug.checkForgottenReturns(\n            value, promiseCreated, \"Promise.method\", ret);\n        ret._resolveFromSyncValue(value);\n        return ret;\n    };\n};\n\nPromise.attempt = Promise[\"try\"] = function (fn) {\n    if (typeof fn !== \"function\") {\n        return apiRejection(\"expecting a function but got \" + util.classString(fn));\n    }\n    var ret = new Promise(INTERNAL);\n    ret._captureStackTrace();\n    ret._pushContext();\n    var value;\n    if (arguments.length > 1) {\n        debug.deprecated(\"calling Promise.try with more than 1 argument\");\n        var arg = arguments[1];\n        var ctx = arguments[2];\n        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)\n                                  : tryCatch(fn).call(ctx, arg);\n    } else {\n        value = tryCatch(fn)();\n    }\n    var promiseCreated = ret._popContext();\n    debug.checkForgottenReturns(\n        value, promiseCreated, \"Promise.try\", ret);\n    ret._resolveFromSyncValue(value);\n    return ret;\n};\n\nPromise.prototype._resolveFromSyncValue = function (value) {\n    if (value === util.errorObj) {\n        this._rejectCallback(value.e, false);\n    } else {\n        this._resolveCallback(value, true);\n    }\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "79",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/method.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1834,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1832,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 1828,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.method",
          "ranges": [
            {
              "startOffset": 243,
              "endOffset": 793,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.attempt.Promise.try",
          "ranges": [
            {
              "startOffset": 831,
              "endOffset": 1616,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._resolveFromSyncValue",
          "ranges": [
            {
              "startOffset": 1661,
              "endOffset": 1825,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar util = require(\"./util\");\nvar maybeWrapAsError = util.maybeWrapAsError;\nvar errors = require(\"./errors\");\nvar OperationalError = errors.OperationalError;\nvar es5 = require(\"./es5\");\n\nfunction isUntypedError(obj) {\n    return obj instanceof Error &&\n        es5.getPrototypeOf(obj) === Error.prototype;\n}\n\nvar rErrorKey = /^(?:name|message|stack|cause)$/;\nfunction wrapAsOperationalError(obj) {\n    var ret;\n    if (isUntypedError(obj)) {\n        ret = new OperationalError(obj);\n        ret.name = obj.name;\n        ret.message = obj.message;\n        ret.stack = obj.stack;\n        var keys = es5.keys(obj);\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!rErrorKey.test(key)) {\n                ret[key] = obj[key];\n            }\n        }\n        return ret;\n    }\n    util.markAsOriginatingFromRejection(obj);\n    return obj;\n}\n\nfunction nodebackForPromise(promise, multiArgs) {\n    return function(err, value) {\n        if (promise === null) return;\n        if (err) {\n            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));\n            promise._attachExtraTrace(wrapped);\n            promise._reject(wrapped);\n        } else if (!multiArgs) {\n            promise._fulfill(value);\n        } else {\n            var $_len = arguments.length;var args = new Array(Math.max($_len - 1, 0)); for(var $_i = 1; $_i < $_len; ++$_i) {args[$_i - 1] = arguments[$_i];};\n            promise._fulfill(args);\n        }\n        promise = null;\n    };\n}\n\nmodule.exports = nodebackForPromise;\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "78",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/nodeback.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1626,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1624,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isUntypedError",
          "ranges": [
            {
              "startOffset": 263,
              "endOffset": 383,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "wrapAsOperationalError",
          "ranges": [
            {
              "startOffset": 435,
              "endOffset": 957,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "nodebackForPromise",
          "ranges": [
            {
              "startOffset": 959,
              "endOffset": 1583,
              "count": 1
            },
            {
              "startOffset": 1581,
              "endOffset": 1582,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1020,
              "endOffset": 1580,
              "count": 1
            },
            {
              "startOffset": 1073,
              "endOffset": 1080,
              "count": 0
            },
            {
              "startOffset": 1098,
              "endOffset": 1268,
              "count": 0
            },
            {
              "startOffset": 1338,
              "endOffset": 1550,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise) {\nvar util = require(\"./util\");\nvar async = Promise._async;\nvar tryCatch = util.tryCatch;\nvar errorObj = util.errorObj;\n\nfunction spreadAdapter(val, nodeback) {\n    var promise = this;\n    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);\n    var ret =\n        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));\n    if (ret === errorObj) {\n        async.throwLater(ret.e);\n    }\n}\n\nfunction successAdapter(val, nodeback) {\n    var promise = this;\n    var receiver = promise._boundValue();\n    var ret = val === undefined\n        ? tryCatch(nodeback).call(receiver, null)\n        : tryCatch(nodeback).call(receiver, null, val);\n    if (ret === errorObj) {\n        async.throwLater(ret.e);\n    }\n}\nfunction errorAdapter(reason, nodeback) {\n    var promise = this;\n    if (!reason) {\n        var newReason = new Error(reason + \"\");\n        newReason.cause = reason;\n        reason = newReason;\n    }\n    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);\n    if (ret === errorObj) {\n        async.throwLater(ret.e);\n    }\n}\n\nPromise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,\n                                                                     options) {\n    if (typeof nodeback == \"function\") {\n        var adapter = successAdapter;\n        if (options !== undefined && Object(options).spread) {\n            adapter = spreadAdapter;\n        }\n        this._then(\n            adapter,\n            errorAdapter,\n            undefined,\n            this,\n            nodeback\n        );\n    }\n    return this;\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "114",
      "url": "/data/projects/web/istanbulize/node_modules/bluebird/js/release/nodeify.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1713,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1711,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 1707,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "spreadAdapter",
          "ranges": [
            {
              "startOffset": 232,
              "endOffset": 535,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "successAdapter",
          "ranges": [
            {
              "startOffset": 537,
              "endOffset": 850,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "errorAdapter",
          "ranges": [
            {
              "startOffset": 851,
              "endOffset": 1190,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.asCallback.Promise.nodeify",
          "ranges": [
            {
              "startOffset": 1251,
              "endOffset": 1704,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function() {\nvar makeSelfResolutionError = function () {\n    return new TypeError(\"circular promise resolution chain\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n};\nvar reflectHandler = function() {\n    return new Promise.PromiseInspection(this._target());\n};\nvar apiRejection = function(msg) {\n    return Promise.reject(new TypeError(msg));\n};\nfunction Proxyable() {}\nvar UNDEFINED_BINDING = {};\nvar util = require(\"./util\");\n\nvar getDomain;\nif (util.isNode) {\n    getDomain = function() {\n        var ret = process.domain;\n        if (ret === undefined) ret = null;\n        return ret;\n    };\n} else {\n    getDomain = function() {\n        return null;\n    };\n}\nutil.notEnumerableProp(Promise, \"_getDomain\", getDomain);\n\nvar es5 = require(\"./es5\");\nvar Async = require(\"./async\");\nvar async = new Async();\nes5.defineProperty(Promise, \"_async\", {value: async});\nvar errors = require(\"./errors\");\nvar TypeError = Promise.TypeError = errors.TypeError;\nPromise.RangeError = errors.RangeError;\nvar CancellationError = Promise.CancellationError = errors.CancellationError;\nPromise.TimeoutError = errors.TimeoutError;\nPromise.OperationalError = errors.OperationalError;\nPromise.RejectionError = errors.OperationalError;\nPromise.AggregateError = errors.AggregateError;\nvar INTERNAL = function(){};\nvar APPLY = {};\nvar NEXT_FILTER = {};\nvar tryConvertToPromise = require(\"./thenables\")(Promise, INTERNAL);\nvar PromiseArray =\n    require(\"./promise_array\")(Promise, INTERNAL,\n                               tryConvertToPromise, apiRejection, Proxyable);\nvar Context = require(\"./context\")(Promise);\n /*jshint unused:false*/\nvar createContext = Context.create;\nvar debug = require(\"./debuggability\")(Promise, Context);\nvar CapturedTrace = debug.CapturedTrace;\nvar PassThroughHandlerContext =\n    require(\"./finally\")(Promise, tryConvertToPromise, NEXT_FILTER);\nvar catchFilter = require(\"./catch_filter\")(NEXT_FILTER);\nvar nodebackForPromise = require(\"./nodeback\");\nvar errorObj = util.errorObj;\nvar tryCatch = util.tryCatch;\nfunction check(self, executor) {\n    if (self == null || self.constructor !== Promise) {\n        throw new TypeError(\"the promise constructor cannot be invoked directly\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    if (typeof executor !== \"function\") {\n        throw new TypeError(\"expecting a function but got \" + util.classString(executor));\n    }\n\n}\n\nfunction Promise(executor) {\n    if (executor !== INTERNAL) {\n        check(this, executor);\n    }\n    this._bitField = 0;\n    this._fulfillmentHandler0 = undefined;\n    this._rejectionHandler0 = undefined;\n    this._promise0 = undefined;\n    this._receiver0 = undefined;\n    this._resolveFromExecutor(executor);\n    this._promiseCreated();\n    this._fireEvent(\"promiseCreated\", this);\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.caught = Promise.prototype[\"catch\"] = function (fn) {\n    var len = arguments.length;\n    if (len > 1) {\n        var catchInstances = new Array(len - 1),\n            j = 0, i;\n        for (i = 0; i < len - 1; ++i) {\n            var item = arguments[i];\n            if (util.isObject(item)) {\n                catchInstances[j++] = item;\n            } else {\n                return apiRejection(\"Catch statement predicate: \" +\n                    \"expecting an object but got \" + util.classString(item));\n            }\n        }\n        catchInstances.length = j;\n        fn = arguments[i];\n        return this.then(undefined, catchFilter(catchInstances, fn, this));\n    }\n    return this.then(undefined, fn);\n};\n\nPromise.prototype.reflect = function () {\n    return this._then(reflectHandler,\n        reflectHandler, undefined, this, undefined);\n};\n\nPromise.prototype.then = function (didFulfill, didReject) {\n    if (debug.warnings() && arguments.length > 0 &&\n        typeof didFulfill !== \"function\" &&\n        typeof didReject !== \"function\") {\n        var msg = \".then() only accepts functions but was passed: \" +\n                util.classString(didFulfill);\n        if (arguments.length > 1) {\n            msg += \", \" + util.classString(didReject);\n        }\n        this._warn(msg);\n    }\n    return this._then(didFulfill, didReject, undefined, undefined, undefined);\n};\n\nPromise.prototype.done = function (didFulfill, didReject) {\n    var promise =\n        this._then(didFulfill, didReject, undefined, undefined, undefined);\n    promise._setIsFinal();\n};\n\nPromise.prototype.spread = function (fn) {\n    if (typeof fn !== \"function\") {\n        return apiRejection(\"expecting a function but got \" + util.classString(fn));\n    }\n    return this.all()._then(fn, undefined, undefined, APPLY, undefined);\n};\n\nPromise.prototype.toJSON = function () {\n    var ret = {\n        isFulfilled: false,\n        isRejected: false,\n        fulfillmentValue: undefined,\n        rejectionReason: undefined\n    };\n    if (this.isFulfilled()) {\n        ret.fulfillmentValue = this.value();\n        ret.isFulfilled = true;\n    } else if (this.isRejected()) {\n        ret.rejectionReason = this.reason();\n        ret.isRejected = true;\n    }\n    return ret;\n};\n\nPromise.prototype.all = function () {\n    if (arguments.length > 0) {\n        this._warn(\".all() was passed arguments but it does not take any\");\n    }\n    return new PromiseArray(this).promise();\n};\n\nPromise.prototype.error = function (fn) {\n    return this.caught(util.originatesFromRejection, fn);\n};\n\nPromise.getNewLibraryCopy = module.exports;\n\nPromise.is = function (val) {\n    return val instanceof Promise;\n};\n\nPromise.fromNode = Promise.fromCallback = function(fn) {\n    var ret = new Promise(INTERNAL);\n    ret._captureStackTrace();\n    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs\n                                         : false;\n    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));\n    if (result === errorObj) {\n        ret._rejectCallback(result.e, true);\n    }\n    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();\n    return ret;\n};\n\nPromise.all = function (promises) {\n    return new PromiseArray(promises).promise();\n};\n\nPromise.cast = function (obj) {\n    var ret = tryConvertToPromise(obj);\n    if (!(ret instanceof Promise)) {\n        ret = new Promise(INTERNAL);\n        ret._captureStackTrace();\n        ret._setFulfilled();\n        ret._rejectionHandler0 = obj;\n    }\n    return ret;\n};\n\nPromise.resolve = Promise.fulfilled = Promise.cast;\n\nPromise.reject = Promise.rejected = function (reason) {\n    var ret = new Promise(INTERNAL);\n    ret._captureStackTrace();\n    ret._rejectCallback(reason, true);\n    return ret;\n};\n\nPromise.setScheduler = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"expecting a function but got \" + util.classString(fn));\n    }\n    return async.setScheduler(fn);\n};\n\nPromise.prototype._then = function (\n    didFulfill,\n    didReject,\n    _,    receiver,\n    internalData\n) {\n    var haveInternalData = internalData !== undefined;\n    var promise = haveInternalData ? internalData : new Promise(INTERNAL);\n    var target = this._target();\n    var bitField = target._bitField;\n\n    if (!haveInternalData) {\n        promise._propagateFrom(this, 3);\n        promise._captureStackTrace();\n        if (receiver === undefined &&\n            ((this._bitField & 2097152) !== 0)) {\n            if (!((bitField & 50397184) === 0)) {\n                receiver = this._boundValue();\n            } else {\n                receiver = target === this ? undefined : this._boundTo;\n            }\n        }\n        this._fireEvent(\"promiseChained\", this, promise);\n    }\n\n    var domain = getDomain();\n    if (!((bitField & 50397184) === 0)) {\n        var handler, value, settler = target._settlePromiseCtx;\n        if (((bitField & 33554432) !== 0)) {\n            value = target._rejectionHandler0;\n            handler = didFulfill;\n        } else if (((bitField & 16777216) !== 0)) {\n            value = target._fulfillmentHandler0;\n            handler = didReject;\n            target._unsetRejectionIsUnhandled();\n        } else {\n            settler = target._settlePromiseLateCancellationObserver;\n            value = new CancellationError(\"late cancellation observer\");\n            target._attachExtraTrace(value);\n            handler = didReject;\n        }\n\n        async.invoke(settler, target, {\n            handler: domain === null ? handler\n                : (typeof handler === \"function\" &&\n                    util.domainBind(domain, handler)),\n            promise: promise,\n            receiver: receiver,\n            value: value\n        });\n    } else {\n        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);\n    }\n\n    return promise;\n};\n\nPromise.prototype._length = function () {\n    return this._bitField & 65535;\n};\n\nPromise.prototype._isFateSealed = function () {\n    return (this._bitField & 117506048) !== 0;\n};\n\nPromise.prototype._isFollowing = function () {\n    return (this._bitField & 67108864) === 67108864;\n};\n\nPromise.prototype._setLength = function (len) {\n    this._bitField = (this._bitField & -65536) |\n        (len & 65535);\n};\n\nPromise.prototype._setFulfilled = function () {\n    this._bitField = this._bitField | 33554432;\n    this._fireEvent(\"promiseFulfilled\", this);\n};\n\nPromise.prototype._setRejected = function () {\n    this._bitField = this._bitField | 16777216;\n    this._fireEvent(\"promiseRejected\", this);\n};\n\nPromise.prototype._setFollowing = function () {\n    this._bitField = this._bitField | 67108864;\n    this._fireEvent(\"promiseResolved\", this);\n};\n\nPromise.prototype._setIsFinal = function () {\n    this._bitField = this._bitField | 4194304;\n};\n\nPromise.prototype._isFinal = function () {\n    return (this._bitField & 4194304) > 0;\n};\n\nPromise.prototype._unsetCancelled = function() {\n    this._bitField = this._bitField & (~65536);\n};\n\nPromise.prototype._setCancelled = function() {\n    this._bitField = this._bitField | 65536;\n    this._fireEvent(\"promiseCancelled\", this);\n};\n\nPromise.prototype._setWillBeCancelled = function() {\n    this._bitField = this._bitField | 8388608;\n};\n\nPromise.prototype._setAsyncGuaranteed = function() {\n    if (async.hasCustomScheduler()) return;\n    this._bitField = this._bitField | 134217728;\n};\n\nPromise.prototype._receiverAt = function (index) {\n    var ret = index === 0 ? this._receiver0 : this[\n            index * 4 - 4 + 3];\n    if (ret === UNDEFINED_BINDING) {\n        return undefined;\n    } else if (ret === undefined && this._isBound()) {\n        return this._boundValue();\n    }\n    return ret;\n};\n\nPromise.prototype._promiseAt = function (index) {\n    return this[\n            index * 4 - 4 + 2];\n};\n\nPromise.prototype._fulfillmentHandlerAt = function (index) {\n    return this[\n            index * 4 - 4 + 0];\n};\n\nPromise.prototype._rejectionHandlerAt = function (index) {\n    return this[\n            index * 4 - 4 + 1];\n};\n\nPromise.prototype._boundValue = function() {};\n\nPromise.prototype._migrateCallback0 = function (follower) {\n    var bitField = follower._bitField;\n    var fulfill = follower._fulfillmentHandler0;\n    var reject = follower._rejectionHandler0;\n    var promise = follower._promise0;\n    var receiver = follower._receiverAt(0);\n    if (receiver === undefined) receiver = UNDEFINED_BINDING;\n    this._addCallbacks(fulfill, reject, promise, receiver, null);\n};\n\nPromise.prototype._migrateCallbackAt = function (follower, index) {\n    var fulfill = follower._fulfillmentHandlerAt(index);\n    var reject = follower._rejectionHandlerAt(index);\n    var promise = follower._promiseAt(index);\n    var receiver = follower._receiverAt(index);\n    if (receiver === undefined) receiver = UNDEFINED_BINDING;\n    this._addCallbacks(fulfill, reject, promise, receiver, null);\n};\n\nPromise.prototype._addCallbacks = function (\n    fulfill,\n    reject,\n    promise,\n    receiver,\n    domain\n) {\n    var index = this._length();\n\n    if (index >= 65535 - 4) {\n        index = 0;\n        this._setLength(0);\n    }\n\n    if (index === 0) {\n        this._promise0 = promise;\n        this._receiver0 = receiver;\n        if (typeof fulfill === \"function\") {\n            this._fulfillmentHandler0 =\n                domain === null ? fulfill : util.domainBind(domain, fulfill);\n        }\n        if (typeof reject === \"function\") {\n            this._rejectionHandler0 =\n                domain === null ? reject : util.domainBind(domain, reject);\n        }\n    } else {\n        var base = index * 4 - 4;\n        this[base + 2] = promise;\n        this[base + 3] = receiver;\n        if (typeof fulfill === \"function\") {\n            this[base + 0] =\n                domain === null ? fulfill : util.domainBind(domain, fulfill);\n        }\n        if (typeof reject === \"function\") {\n            this[base + 1] =\n                domain === null ? reject : util.domainBind(domain, reject);\n        }\n    }\n    this._setLength(index + 1);\n    return index;\n};\n\nPromise.prototype._proxy = function (proxyable, arg) {\n    this._addCallbacks(undefined, undefined, arg, proxyable, null);\n};\n\nPromise.prototype._resolveCallback = function(value, shouldBind) {\n    if (((this._bitField & 117506048) !== 0)) return;\n    if (value === this)\n        return this._rejectCallback(makeSelfResolutionError(), false);\n    var maybePromise = tryConvertToPromise(value, this);\n    if (!(maybePromise instanceof Promise)) return this._fulfill(value);\n\n    if (shouldBind) this._propagateFrom(maybePromise, 2);\n\n    var promise = maybePromise._target();\n\n    if (promise === this) {\n        this._reject(makeSelfResolutionError());\n        return;\n    }\n\n    var bitField = promise._bitField;\n    if (((bitField & 50397184) === 0)) {\n        var len = this._length();\n        if (len > 0) promise._migrateCallback0(this);\n        for (var i = 1; i < len; ++i) {\n            promise._migrateCallbackAt(this, i);\n        }\n        this._setFollowing();\n        this._setLength(0);\n        this._setFollowee(promise);\n    } else if (((bitField & 33554432) !== 0)) {\n        this._fulfill(promise._value());\n    } else if (((bitField & 16777216) !== 0)) {\n        this._reject(promise._reason());\n    } else {\n        var reason = new CancellationError(\"late cancellation observer\");\n        promise._attachExtraTrace(reason);\n        this._reject(reason);\n    }\n};\n\nPromise.prototype._rejectCallback =\nfunction(reason, synchronous, ignoreNonErrorWarnings) {\n    var trace = util.ensureErrorObject(reason);\n    var hasStack = trace === reason;\n    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {\n        var message = \"a promise was rejected with a non-error: \" +\n            util.classString(reason);\n        this._warn(message, true);\n    }\n    this._attachExtraTrace(trace, synchronous ? hasStack : false);\n    this._reject(reason);\n};\n\nPromise.prototype._resolveFromExecutor = function (executor) {\n    if (executor === INTERNAL) return;\n    var promise = this;\n    this._captureStackTrace();\n    this._pushContext();\n    var synchronous = true;\n    var r = this._execute(executor, function(value) {\n        promise._resolveCallback(value);\n    }, function (reason) {\n        promise._rejectCallback(reason, synchronous);\n    });\n    synchronous = false;\n    this._popContext();\n\n    if (r !== undefined) {\n        promise._rejectCallback(r, true);\n    }\n};\n\nPromise.prototype._settlePromiseFromHandler = function (\n    handler, receiver, value, promise\n) {\n    var bitField = promise._bitField;\n    if (((bitField & 65536) !== 0)) return;\n    promise._pushContext();\n    var x;\n    if (receiver === APPLY) {\n        if (!value || typeof value.length !== \"number\") {\n            x = errorObj;\n            x.e = new TypeError(\"cannot .spread() a non-array: \" +\n                                    util.classString(value));\n        } else {\n            x = tryCatch(handler).apply(this._boundValue(), value);\n        }\n    } else {\n        x = tryCatch(handler).call(receiver, value);\n    }\n    var promiseCreated = promise._popContext();\n    bitField = promise._bitField;\n    if (((bitField & 65536) !== 0)) return;\n\n    if (x === NEXT_FILTER) {\n        promise._reject(value);\n    } else if (x === errorObj) {\n        promise._rejectCallback(x.e, false);\n    } else {\n        debug.checkForgottenReturns(x, promiseCreated, \"\",  promise, this);\n        promise._resolveCallback(x);\n    }\n};\n\nPromise.prototype._target = function() {\n    var ret = this;\n    while (ret._isFollowing()) ret = ret._followee();\n    return ret;\n};\n\nPromise.prototype._followee = function() {\n    return this._rejectionHandler0;\n};\n\nPromise.prototype._setFollowee = function(promise) {\n    this._rejectionHandler0 = promise;\n};\n\nPromise.prototype._settlePromise = function(promise, handler, receiver, value) {\n    var isPromise = promise instanceof Promise;\n    var bitField = this._bitField;\n    var asyncGuaranteed = ((bitField & 134217728) !== 0);\n    if (((bitField & 65536) !== 0)) {\n        if (isPromise) promise._invokeInternalOnCancel();\n\n        if (receiver instanceof PassThroughHandlerContext &&\n            receiver.isFinallyHandler()) {\n            receiver.cancelPromise = promise;\n            if (tryCatch(handler).call(receiver, value) === errorObj) {\n                promise._reject(errorObj.e);\n            }\n        } else if (handler === reflectHandler) {\n            promise._fulfill(reflectHandler.call(receiver));\n        } else if (receiver instanceof Proxyable) {\n            receiver._promiseCancelled(promise);\n        } else if (isPromise || promise instanceof PromiseArray) {\n            promise._cancel();\n        } else {\n            receiver.cancel();\n        }\n    } else if (typeof handler === \"function\") {\n        if (!isPromise) {\n            handler.call(receiver, value, promise);\n        } else {\n            if (asyncGuaranteed) promise._setAsyncGuaranteed();\n            this._settlePromiseFromHandler(handler, receiver, value, promise);\n        }\n    } else if (receiver instanceof Proxyable) {\n        if (!receiver._isResolved()) {\n            if (((bitField & 33554432) !== 0)) {\n                receiver._promiseFulfilled(value, promise);\n            } else {\n                receiver._promiseRejected(value, promise);\n            }\n        }\n    } else if (isPromise) {\n        if (asyncGuaranteed) promise._setAsyncGuaranteed();\n        if (((bitField & 33554432) !== 0)) {\n            promise._fulfill(value);\n        } else {\n            promise._reject(value);\n        }\n    }\n};\n\nPromise.prototype._settlePromiseLateCancellationObserver = function(ctx) {\n    var handler = ctx.handler;\n    var promise = ctx.promise;\n    var receiver = ctx.receiver;\n    var value = ctx.value;\n    if (typeof handler === \"function\") {\n        if (!(promise instanceof Promise)) {\n            handler.call(receiver, value, promise);\n        } else {\n            this._settlePromiseFromHandler(handler, receiver, value, promise);\n        }\n    } else if (promise instanceof Promise) {\n        promise._reject(value);\n    }\n};\n\nPromise.prototype._settlePromiseCtx = function(ctx) {\n    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);\n};\n\nPromise.prototype._settlePromise0 = function(handler, value, bitField) {\n    var promise = this._promise0;\n    var receiver = this._receiverAt(0);\n    this._promise0 = undefined;\n    this._receiver0 = undefined;\n    this._settlePromise(promise, handler, receiver, value);\n};\n\nPromise.prototype._clearCallbackDataAtIndex = function(index) {\n    var base = index * 4 - 4;\n    this[base + 2] =\n    this[base + 3] =\n    this[base + 0] =\n    this[base + 1] = undefined;\n};\n\nPromise.prototype._fulfill = function (value) {\n    var bitField = this._bitField;\n    if (((bitField & 117506048) >>> 16)) return;\n    if (value === this) {\n        var err = makeSelfResolutionError();\n        this._attachExtraTrace(err);\n        return this._reject(err);\n    }\n    this._setFulfilled();\n    this._rejectionHandler0 = value;\n\n    if ((bitField & 65535) > 0) {\n        if (((bitField & 134217728) !== 0)) {\n            this._settlePromises();\n        } else {\n            async.settlePromises(this);\n        }\n        this._dereferenceTrace();\n    }\n};\n\nPromise.prototype._reject = function (reason) {\n    var bitField = this._bitField;\n    if (((bitField & 117506048) >>> 16)) return;\n    this._setRejected();\n    this._fulfillmentHandler0 = reason;\n\n    if (this._isFinal()) {\n        return async.fatalError(reason, util.isNode);\n    }\n\n    if ((bitField & 65535) > 0) {\n        async.settlePromises(this);\n    } else {\n        this._ensurePossibleRejectionHandled();\n    }\n};\n\nPromise.prototype._fulfillPromises = function (len, value) {\n    for (var i = 1; i < len; i++) {\n        var handler = this._fulfillmentHandlerAt(i);\n        var promise = this._promiseAt(i);\n        var receiver = this._receiverAt(i);\n        this._clearCallbackDataAtIndex(i);\n        this._settlePromise(promise, handler, receiver, value);\n    }\n};\n\nPromise.prototype._rejectPromises = function (len, reason) {\n    for (var i = 1; i < len; i++) {\n        var handler = this._rejectionHandlerAt(i);\n        var promise = this._promiseAt(i);\n        var receiver = this._receiverAt(i);\n        this._clearCallbackDataAtIndex(i);\n        this._settlePromise(promise, handler, receiver, reason);\n    }\n};\n\nPromise.prototype._settlePromises = function () {\n    var bitField = this._bitField;\n    var len = (bitField & 65535);\n\n    if (len > 0) {\n        if (((bitField & 16842752) !== 0)) {\n            var reason = this._fulfillmentHandler0;\n            this._settlePromise0(this._rejectionHandler0, reason, bitField);\n            this._rejectPromises(len, reason);\n        } else {\n            var value = this._rejectionHandler0;\n            this._settlePromise0(this._fulfillmentHandler0, value, bitField);\n            this._fulfillPromises(len, value);\n        }\n        this._setLength(0);\n    }\n    this._clearCancellationData();\n};\n\nPromise.prototype._settledValue = function() {\n    var bitField = this._bitField;\n    if (((bitField & 33554432) !== 0)) {\n        return this._rejectionHandler0;\n    } else if (((bitField & 16777216) !== 0)) {\n        return this._fulfillmentHandler0;\n    }\n};\n\nfunction deferResolve(v) {this.promise._resolveCallback(v);}\nfunction deferReject(v) {this.promise._rejectCallback(v, false);}\n\nPromise.defer = Promise.pending = function() {\n    debug.deprecated(\"Promise.defer\", \"new Promise\");\n    var promise = new Promise(INTERNAL);\n    return {\n        promise: promise,\n        resolve: deferResolve,\n        reject: deferReject\n    };\n};\n\nutil.notEnumerableProp(Promise,\n                       \"_makeSelfResolutionError\",\n                       makeSelfResolutionError);\n\nrequire(\"./method\")(Promise, INTERNAL, tryConvertToPromise, apiRejection,\n    debug);\nrequire(\"./bind\")(Promise, INTERNAL, tryConvertToPromise, debug);\nrequire(\"./cancel\")(Promise, PromiseArray, apiRejection, debug);\nrequire(\"./direct_resolve\")(Promise);\nrequire(\"./synchronous_inspection\")(Promise);\nrequire(\"./join\")(\n    Promise, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain);\nPromise.Promise = Promise;\nPromise.version = \"3.5.2\";\nrequire('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);\nrequire('./call_get.js')(Promise);\nrequire('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);\nrequire('./timers.js')(Promise, INTERNAL, debug);\nrequire('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);\nrequire('./nodeify.js')(Promise);\nrequire('./promisify.js')(Promise, INTERNAL);\nrequire('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);\nrequire('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);\nrequire('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);\nrequire('./settle.js')(Promise, PromiseArray, debug);\nrequire('./some.js')(Promise, PromiseArray, apiRejection);\nrequire('./filter.js')(Promise, INTERNAL);\nrequire('./each.js')(Promise, INTERNAL);\nrequire('./any.js')(Promise);\n                                                         \n    util.toFastProperties(Promise);                                          \n    util.toFastProperties(Promise.prototype);                                \n    function fillTypes(value) {                                              \n        var p = new Promise(INTERNAL);                                       \n        p._fulfillmentHandler0 = value;                                      \n        p._rejectionHandler0 = value;                                        \n        p._promise0 = value;                                                 \n        p._receiver0 = value;                                                \n    }                                                                        \n    // Complete slack tracking, opt out of field-type tracking and           \n    // stabilize map                                                         \n    fillTypes({a: 1});                                                       \n    fillTypes({b: 2});                                                       \n    fillTypes({c: 3});                                                       \n    fillTypes(1);                                                            \n    fillTypes(function(){});                                                 \n    fillTypes(undefined);                                                    \n    fillTypes(false);                                                        \n    fillTypes(new Promise(INTERNAL));                                        \n    debug.setBounds(Async.firstLineError, util.lastLineError);               \n    return Promise;                                                          \n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "65",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/promise.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 25888,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 25886,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 25882,
              "count": 1
            },
            {
              "startOffset": 693,
              "endOffset": 759,
              "count": 0
            },
            {
              "startOffset": 25821,
              "endOffset": 25881,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeSelfResolutionError",
          "ranges": [
            {
              "startOffset": 136,
              "endOffset": 260,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "reflectHandler",
          "ranges": [
            {
              "startOffset": 283,
              "endOffset": 355,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "apiRejection",
          "ranges": [
            {
              "startOffset": 376,
              "endOffset": 440,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Proxyable",
          "ranges": [
            {
              "startOffset": 442,
              "endOffset": 465,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDomain",
          "ranges": [
            {
              "startOffset": 575,
              "endOffset": 690,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDomain",
          "ranges": [
            {
              "startOffset": 717,
              "endOffset": 756,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "INTERNAL",
          "ranges": [
            {
              "startOffset": 1374,
              "endOffset": 1386,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "check",
          "ranges": [
            {
              "startOffset": 2114,
              "endOffset": 2479,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise",
          "ranges": [
            {
              "startOffset": 2481,
              "endOffset": 2868,
              "count": 10
            },
            {
              "startOffset": 2541,
              "endOffset": 2579,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.toString",
          "ranges": [
            {
              "startOffset": 2899,
              "endOffset": 2945,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.caught.Promise.catch",
          "ranges": [
            {
              "startOffset": 3004,
              "endOffset": 3675,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.reflect",
          "ranges": [
            {
              "startOffset": 3706,
              "endOffset": 3812,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.then",
          "ranges": [
            {
              "startOffset": 3840,
              "endOffset": 4342,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.done",
          "ranges": [
            {
              "startOffset": 4370,
              "endOffset": 4527,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.spread",
          "ranges": [
            {
              "startOffset": 4557,
              "endOffset": 4774,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.toJSON",
          "ranges": [
            {
              "startOffset": 4804,
              "endOffset": 5210,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.all",
          "ranges": [
            {
              "startOffset": 5237,
              "endOffset": 5411,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.error",
          "ranges": [
            {
              "startOffset": 5440,
              "endOffset": 5515,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.is",
          "ranges": [
            {
              "startOffset": 5576,
              "endOffset": 5629,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.fromNode.Promise.fromCallback",
          "ranges": [
            {
              "startOffset": 5674,
              "endOffset": 6105,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.all",
          "ranges": [
            {
              "startOffset": 6122,
              "endOffset": 6194,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.cast",
          "ranges": [
            {
              "startOffset": 6212,
              "endOffset": 6467,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.reject.Promise.rejected",
          "ranges": [
            {
              "startOffset": 6559,
              "endOffset": 6702,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.setScheduler",
          "ranges": [
            {
              "startOffset": 6728,
              "endOffset": 6906,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._then",
          "ranges": [
            {
              "startOffset": 6935,
              "endOffset": 8801,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._length",
          "ranges": [
            {
              "startOffset": 8832,
              "endOffset": 8882,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isFateSealed",
          "ranges": [
            {
              "startOffset": 8919,
              "endOffset": 8981,
              "count": 1
            },
            {
              "startOffset": 8979,
              "endOffset": 8980,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._isFollowing",
          "ranges": [
            {
              "startOffset": 9017,
              "endOffset": 9085,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setLength",
          "ranges": [
            {
              "startOffset": 9119,
              "endOffset": 9209,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setFulfilled",
          "ranges": [
            {
              "startOffset": 9246,
              "endOffset": 9356,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._setRejected",
          "ranges": [
            {
              "startOffset": 9392,
              "endOffset": 9501,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setFollowing",
          "ranges": [
            {
              "startOffset": 9538,
              "endOffset": 9647,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setIsFinal",
          "ranges": [
            {
              "startOffset": 9682,
              "endOffset": 9744,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isFinal",
          "ranges": [
            {
              "startOffset": 9776,
              "endOffset": 9834,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._unsetCancelled",
          "ranges": [
            {
              "startOffset": 9873,
              "endOffset": 9935,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setCancelled",
          "ranges": [
            {
              "startOffset": 9972,
              "endOffset": 10078,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setWillBeCancelled",
          "ranges": [
            {
              "startOffset": 10121,
              "endOffset": 10182,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setAsyncGuaranteed",
          "ranges": [
            {
              "startOffset": 10225,
              "endOffset": 10332,
              "count": 1
            },
            {
              "startOffset": 10274,
              "endOffset": 10281,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._receiverAt",
          "ranges": [
            {
              "startOffset": 10367,
              "endOffset": 10646,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._promiseAt",
          "ranges": [
            {
              "startOffset": 10680,
              "endOffset": 10749,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._fulfillmentHandlerAt",
          "ranges": [
            {
              "startOffset": 10794,
              "endOffset": 10863,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._rejectionHandlerAt",
          "ranges": [
            {
              "startOffset": 10906,
              "endOffset": 10975,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._boundValue",
          "ranges": [
            {
              "startOffset": 11010,
              "endOffset": 11023,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._migrateCallback0",
          "ranges": [
            {
              "startOffset": 11064,
              "endOffset": 11431,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._migrateCallbackAt",
          "ranges": [
            {
              "startOffset": 11473,
              "endOffset": 11836,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._addCallbacks",
          "ranges": [
            {
              "startOffset": 11873,
              "endOffset": 12996,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._proxy",
          "ranges": [
            {
              "startOffset": 13026,
              "endOffset": 13123,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._resolveCallback",
          "ranges": [
            {
              "startOffset": 13163,
              "endOffset": 14380,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._rejectCallback",
          "ranges": [
            {
              "startOffset": 14419,
              "endOffset": 14869,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._resolveFromExecutor",
          "ranges": [
            {
              "startOffset": 14913,
              "endOffset": 15392,
              "count": 10
            },
            {
              "startOffset": 14973,
              "endOffset": 15391,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 15118,
              "endOffset": 15182,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 15184,
              "endOffset": 15263,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settlePromiseFromHandler",
          "ranges": [
            {
              "startOffset": 15441,
              "endOffset": 16424,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._target",
          "ranges": [
            {
              "startOffset": 16455,
              "endOffset": 16559,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._followee",
          "ranges": [
            {
              "startOffset": 16592,
              "endOffset": 16642,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setFollowee",
          "ranges": [
            {
              "startOffset": 16678,
              "endOffset": 16738,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settlePromise",
          "ranges": [
            {
              "startOffset": 16776,
              "endOffset": 18544,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settlePromiseLateCancellationObserver",
          "ranges": [
            {
              "startOffset": 18606,
              "endOffset": 19072,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settlePromiseCtx",
          "ranges": [
            {
              "startOffset": 19113,
              "endOffset": 19206,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settlePromise0",
          "ranges": [
            {
              "startOffset": 19245,
              "endOffset": 19482,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._clearCallbackDataAtIndex",
          "ranges": [
            {
              "startOffset": 19531,
              "endOffset": 19675,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._fulfill",
          "ranges": [
            {
              "startOffset": 19707,
              "endOffset": 20246,
              "count": 1
            },
            {
              "startOffset": 19802,
              "endOffset": 19809,
              "count": 0
            },
            {
              "startOffset": 19834,
              "endOffset": 19957,
              "count": 0
            },
            {
              "startOffset": 20054,
              "endOffset": 20244,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise._reject",
          "ranges": [
            {
              "startOffset": 20277,
              "endOffset": 20673,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._fulfillPromises",
          "ranges": [
            {
              "startOffset": 20713,
              "endOffset": 21026,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._rejectPromises",
          "ranges": [
            {
              "startOffset": 21065,
              "endOffset": 21378,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settlePromises",
          "ranges": [
            {
              "startOffset": 21417,
              "endOffset": 22012,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._settledValue",
          "ranges": [
            {
              "startOffset": 22049,
              "endOffset": 22275,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "deferResolve",
          "ranges": [
            {
              "startOffset": 22278,
              "endOffset": 22338,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "deferReject",
          "ranges": [
            {
              "startOffset": 22339,
              "endOffset": 22404,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.defer.Promise.pending",
          "ranges": [
            {
              "startOffset": 22440,
              "endOffset": 22654,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "fillTypes",
          "ranges": [
            {
              "startOffset": 24402,
              "endOffset": 24871,
              "count": 8
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 25426,
              "endOffset": 25438,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL, tryConvertToPromise,\n    apiRejection, Proxyable) {\nvar util = require(\"./util\");\nvar isArray = util.isArray;\n\nfunction toResolutionValue(val) {\n    switch(val) {\n    case -2: return [];\n    case -3: return {};\n    case -6: return new Map();\n    }\n}\n\nfunction PromiseArray(values) {\n    var promise = this._promise = new Promise(INTERNAL);\n    if (values instanceof Promise) {\n        promise._propagateFrom(values, 3);\n    }\n    promise._setOnCancel(this);\n    this._values = values;\n    this._length = 0;\n    this._totalResolved = 0;\n    this._init(undefined, -2);\n}\nutil.inherits(PromiseArray, Proxyable);\n\nPromiseArray.prototype.length = function () {\n    return this._length;\n};\n\nPromiseArray.prototype.promise = function () {\n    return this._promise;\n};\n\nPromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {\n    var values = tryConvertToPromise(this._values, this._promise);\n    if (values instanceof Promise) {\n        values = values._target();\n        var bitField = values._bitField;\n        ;\n        this._values = values;\n\n        if (((bitField & 50397184) === 0)) {\n            this._promise._setAsyncGuaranteed();\n            return values._then(\n                init,\n                this._reject,\n                undefined,\n                this,\n                resolveValueIfEmpty\n           );\n        } else if (((bitField & 33554432) !== 0)) {\n            values = values._value();\n        } else if (((bitField & 16777216) !== 0)) {\n            return this._reject(values._reason());\n        } else {\n            return this._cancel();\n        }\n    }\n    values = util.asArray(values);\n    if (values === null) {\n        var err = apiRejection(\n            \"expecting an array or an iterable object but got \" + util.classString(values)).reason();\n        this._promise._rejectCallback(err, false);\n        return;\n    }\n\n    if (values.length === 0) {\n        if (resolveValueIfEmpty === -5) {\n            this._resolveEmptyArray();\n        }\n        else {\n            this._resolve(toResolutionValue(resolveValueIfEmpty));\n        }\n        return;\n    }\n    this._iterate(values);\n};\n\nPromiseArray.prototype._iterate = function(values) {\n    var len = this.getActualLength(values.length);\n    this._length = len;\n    this._values = this.shouldCopyValues() ? new Array(len) : this._values;\n    var result = this._promise;\n    var isResolved = false;\n    var bitField = null;\n    for (var i = 0; i < len; ++i) {\n        var maybePromise = tryConvertToPromise(values[i], result);\n\n        if (maybePromise instanceof Promise) {\n            maybePromise = maybePromise._target();\n            bitField = maybePromise._bitField;\n        } else {\n            bitField = null;\n        }\n\n        if (isResolved) {\n            if (bitField !== null) {\n                maybePromise.suppressUnhandledRejections();\n            }\n        } else if (bitField !== null) {\n            if (((bitField & 50397184) === 0)) {\n                maybePromise._proxy(this, i);\n                this._values[i] = maybePromise;\n            } else if (((bitField & 33554432) !== 0)) {\n                isResolved = this._promiseFulfilled(maybePromise._value(), i);\n            } else if (((bitField & 16777216) !== 0)) {\n                isResolved = this._promiseRejected(maybePromise._reason(), i);\n            } else {\n                isResolved = this._promiseCancelled(i);\n            }\n        } else {\n            isResolved = this._promiseFulfilled(maybePromise, i);\n        }\n    }\n    if (!isResolved) result._setAsyncGuaranteed();\n};\n\nPromiseArray.prototype._isResolved = function () {\n    return this._values === null;\n};\n\nPromiseArray.prototype._resolve = function (value) {\n    this._values = null;\n    this._promise._fulfill(value);\n};\n\nPromiseArray.prototype._cancel = function() {\n    if (this._isResolved() || !this._promise._isCancellable()) return;\n    this._values = null;\n    this._promise._cancel();\n};\n\nPromiseArray.prototype._reject = function (reason) {\n    this._values = null;\n    this._promise._rejectCallback(reason, false);\n};\n\nPromiseArray.prototype._promiseFulfilled = function (value, index) {\n    this._values[index] = value;\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= this._length) {\n        this._resolve(this._values);\n        return true;\n    }\n    return false;\n};\n\nPromiseArray.prototype._promiseCancelled = function() {\n    this._cancel();\n    return true;\n};\n\nPromiseArray.prototype._promiseRejected = function (reason) {\n    this._totalResolved++;\n    this._reject(reason);\n    return true;\n};\n\nPromiseArray.prototype._resultCancelled = function() {\n    if (this._isResolved()) return;\n    var values = this._values;\n    this._cancel();\n    if (values instanceof Promise) {\n        values.cancel();\n    } else {\n        for (var i = 0; i < values.length; ++i) {\n            if (values[i] instanceof Promise) {\n                values[i].cancel();\n            }\n        }\n    }\n};\n\nPromiseArray.prototype.shouldCopyValues = function () {\n    return true;\n};\n\nPromiseArray.prototype.getActualLength = function (len) {\n    return len;\n};\n\nreturn PromiseArray;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "73",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/promise_array.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 5272,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 5270,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 5266,
              "count": 1
            },
            {
              "startOffset": 5264,
              "endOffset": 5265,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "toResolutionValue",
          "ranges": [
            {
              "startOffset": 232,
              "endOffset": 370,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray",
          "ranges": [
            {
              "startOffset": 372,
              "endOffset": 689,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray.length",
          "ranges": [
            {
              "startOffset": 763,
              "endOffset": 803,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray.promise",
          "ranges": [
            {
              "startOffset": 839,
              "endOffset": 880,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "init",
          "ranges": [
            {
              "startOffset": 914,
              "endOffset": 2249,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._iterate",
          "ranges": [
            {
              "startOffset": 2286,
              "endOffset": 3679,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._isResolved",
          "ranges": [
            {
              "startOffset": 3719,
              "endOffset": 3768,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._resolve",
          "ranges": [
            {
              "startOffset": 3805,
              "endOffset": 3885,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._cancel",
          "ranges": [
            {
              "startOffset": 3921,
              "endOffset": 4060,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._reject",
          "ranges": [
            {
              "startOffset": 4096,
              "endOffset": 4192,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._promiseFulfilled",
          "ranges": [
            {
              "startOffset": 4238,
              "endOffset": 4468,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._promiseCancelled",
          "ranges": [
            {
              "startOffset": 4514,
              "endOffset": 4565,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._promiseRejected",
          "ranges": [
            {
              "startOffset": 4610,
              "endOffset": 4701,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray._resultCancelled",
          "ranges": [
            {
              "startOffset": 4746,
              "endOffset": 5086,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray.shouldCopyValues",
          "ranges": [
            {
              "startOffset": 5131,
              "endOffset": 5163,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseArray.getActualLength",
          "ranges": [
            {
              "startOffset": 5207,
              "endOffset": 5241,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL) {\nvar THIS = {};\nvar util = require(\"./util\");\nvar nodebackForPromise = require(\"./nodeback\");\nvar withAppended = util.withAppended;\nvar maybeWrapAsError = util.maybeWrapAsError;\nvar canEvaluate = util.canEvaluate;\nvar TypeError = require(\"./errors\").TypeError;\nvar defaultSuffix = \"Async\";\nvar defaultPromisified = {__isPromisified__: true};\nvar noCopyProps = [\n    \"arity\",    \"length\",\n    \"name\",\n    \"arguments\",\n    \"caller\",\n    \"callee\",\n    \"prototype\",\n    \"__isPromisified__\"\n];\nvar noCopyPropsPattern = new RegExp(\"^(?:\" + noCopyProps.join(\"|\") + \")$\");\n\nvar defaultFilter = function(name) {\n    return util.isIdentifier(name) &&\n        name.charAt(0) !== \"_\" &&\n        name !== \"constructor\";\n};\n\nfunction propsFilter(key) {\n    return !noCopyPropsPattern.test(key);\n}\n\nfunction isPromisified(fn) {\n    try {\n        return fn.__isPromisified__ === true;\n    }\n    catch (e) {\n        return false;\n    }\n}\n\nfunction hasPromisified(obj, key, suffix) {\n    var val = util.getDataPropertyOrDefault(obj, key + suffix,\n                                            defaultPromisified);\n    return val ? isPromisified(val) : false;\n}\nfunction checkValid(ret, suffix, suffixRegexp) {\n    for (var i = 0; i < ret.length; i += 2) {\n        var key = ret[i];\n        if (suffixRegexp.test(key)) {\n            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, \"\");\n            for (var j = 0; j < ret.length; j += 2) {\n                if (ret[j] === keyWithoutAsyncSuffix) {\n                    throw new TypeError(\"Cannot promisify an API that has normal methods with '%s'-suffix\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\"\n                        .replace(\"%s\", suffix));\n                }\n            }\n        }\n    }\n}\n\nfunction promisifiableMethods(obj, suffix, suffixRegexp, filter) {\n    var keys = util.inheritedDataKeys(obj);\n    var ret = [];\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var value = obj[key];\n        var passesDefaultFilter = filter === defaultFilter\n            ? true : defaultFilter(key, value, obj);\n        if (typeof value === \"function\" &&\n            !isPromisified(value) &&\n            !hasPromisified(obj, key, suffix) &&\n            filter(key, value, obj, passesDefaultFilter)) {\n            ret.push(key, value);\n        }\n    }\n    checkValid(ret, suffix, suffixRegexp);\n    return ret;\n}\n\nvar escapeIdentRegex = function(str) {\n    return str.replace(/([$])/, \"\\\\$\");\n};\n\nvar makeNodePromisifiedEval;\nif (!false) {\nvar switchCaseArgumentOrder = function(likelyArgumentCount) {\n    var ret = [likelyArgumentCount];\n    var min = Math.max(0, likelyArgumentCount - 1 - 3);\n    for(var i = likelyArgumentCount - 1; i >= min; --i) {\n        ret.push(i);\n    }\n    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {\n        ret.push(i);\n    }\n    return ret;\n};\n\nvar argumentSequence = function(argumentCount) {\n    return util.filledRange(argumentCount, \"_arg\", \"\");\n};\n\nvar parameterDeclaration = function(parameterCount) {\n    return util.filledRange(\n        Math.max(parameterCount, 3), \"_arg\", \"\");\n};\n\nvar parameterCount = function(fn) {\n    if (typeof fn.length === \"number\") {\n        return Math.max(Math.min(fn.length, 1023 + 1), 0);\n    }\n    return 0;\n};\n\nmakeNodePromisifiedEval =\nfunction(callback, receiver, originalName, fn, _, multiArgs) {\n    var newParameterCount = Math.max(0, parameterCount(fn) - 1);\n    var argumentOrder = switchCaseArgumentOrder(newParameterCount);\n    var shouldProxyThis = typeof callback === \"string\" || receiver === THIS;\n\n    function generateCallForArgumentCount(count) {\n        var args = argumentSequence(count).join(\", \");\n        var comma = count > 0 ? \", \" : \"\";\n        var ret;\n        if (shouldProxyThis) {\n            ret = \"ret = callback.call(this, {{args}}, nodeback); break;\\n\";\n        } else {\n            ret = receiver === undefined\n                ? \"ret = callback({{args}}, nodeback); break;\\n\"\n                : \"ret = callback.call(receiver, {{args}}, nodeback); break;\\n\";\n        }\n        return ret.replace(\"{{args}}\", args).replace(\", \", comma);\n    }\n\n    function generateArgumentSwitchCase() {\n        var ret = \"\";\n        for (var i = 0; i < argumentOrder.length; ++i) {\n            ret += \"case \" + argumentOrder[i] +\":\" +\n                generateCallForArgumentCount(argumentOrder[i]);\n        }\n\n        ret += \"                                                             \\n\\\n        default:                                                             \\n\\\n            var args = new Array(len + 1);                                   \\n\\\n            var i = 0;                                                       \\n\\\n            for (var i = 0; i < len; ++i) {                                  \\n\\\n               args[i] = arguments[i];                                       \\n\\\n            }                                                                \\n\\\n            args[i] = nodeback;                                              \\n\\\n            [CodeForCall]                                                    \\n\\\n            break;                                                           \\n\\\n        \".replace(\"[CodeForCall]\", (shouldProxyThis\n                                ? \"ret = callback.apply(this, args);\\n\"\n                                : \"ret = callback.apply(receiver, args);\\n\"));\n        return ret;\n    }\n\n    var getFunctionCode = typeof callback === \"string\"\n                                ? (\"this != null ? this['\"+callback+\"'] : fn\")\n                                : \"fn\";\n    var body = \"'use strict';                                                \\n\\\n        var ret = function (Parameters) {                                    \\n\\\n            'use strict';                                                    \\n\\\n            var len = arguments.length;                                      \\n\\\n            var promise = new Promise(INTERNAL);                             \\n\\\n            promise._captureStackTrace();                                    \\n\\\n            var nodeback = nodebackForPromise(promise, \" + multiArgs + \");   \\n\\\n            var ret;                                                         \\n\\\n            var callback = tryCatch([GetFunctionCode]);                      \\n\\\n            switch(len) {                                                    \\n\\\n                [CodeForSwitchCase]                                          \\n\\\n            }                                                                \\n\\\n            if (ret === errorObj) {                                          \\n\\\n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\\n\\\n            }                                                                \\n\\\n            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \\n\\\n            return promise;                                                  \\n\\\n        };                                                                   \\n\\\n        notEnumerableProp(ret, '__isPromisified__', true);                   \\n\\\n        return ret;                                                          \\n\\\n    \".replace(\"[CodeForSwitchCase]\", generateArgumentSwitchCase())\n        .replace(\"[GetFunctionCode]\", getFunctionCode);\n    body = body.replace(\"Parameters\", parameterDeclaration(newParameterCount));\n    return new Function(\"Promise\",\n                        \"fn\",\n                        \"receiver\",\n                        \"withAppended\",\n                        \"maybeWrapAsError\",\n                        \"nodebackForPromise\",\n                        \"tryCatch\",\n                        \"errorObj\",\n                        \"notEnumerableProp\",\n                        \"INTERNAL\",\n                        body)(\n                    Promise,\n                    fn,\n                    receiver,\n                    withAppended,\n                    maybeWrapAsError,\n                    nodebackForPromise,\n                    util.tryCatch,\n                    util.errorObj,\n                    util.notEnumerableProp,\n                    INTERNAL);\n};\n}\n\nfunction makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {\n    var defaultThis = (function() {return this;})();\n    var method = callback;\n    if (typeof method === \"string\") {\n        callback = fn;\n    }\n    function promisified() {\n        var _receiver = receiver;\n        if (receiver === THIS) _receiver = this;\n        var promise = new Promise(INTERNAL);\n        promise._captureStackTrace();\n        var cb = typeof method === \"string\" && this !== defaultThis\n            ? this[method] : callback;\n        var fn = nodebackForPromise(promise, multiArgs);\n        try {\n            cb.apply(_receiver, withAppended(arguments, fn));\n        } catch(e) {\n            promise._rejectCallback(maybeWrapAsError(e), true, true);\n        }\n        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();\n        return promise;\n    }\n    util.notEnumerableProp(promisified, \"__isPromisified__\", true);\n    return promisified;\n}\n\nvar makeNodePromisified = canEvaluate\n    ? makeNodePromisifiedEval\n    : makeNodePromisifiedClosure;\n\nfunction promisifyAll(obj, suffix, filter, promisifier, multiArgs) {\n    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + \"$\");\n    var methods =\n        promisifiableMethods(obj, suffix, suffixRegexp, filter);\n\n    for (var i = 0, len = methods.length; i < len; i+= 2) {\n        var key = methods[i];\n        var fn = methods[i+1];\n        var promisifiedKey = key + suffix;\n        if (promisifier === makeNodePromisified) {\n            obj[promisifiedKey] =\n                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);\n        } else {\n            var promisified = promisifier(fn, function() {\n                return makeNodePromisified(key, THIS, key,\n                                           fn, suffix, multiArgs);\n            });\n            util.notEnumerableProp(promisified, \"__isPromisified__\", true);\n            obj[promisifiedKey] = promisified;\n        }\n    }\n    util.toFastProperties(obj);\n    return obj;\n}\n\nfunction promisify(callback, receiver, multiArgs) {\n    return makeNodePromisified(callback, receiver, undefined,\n                                callback, null, multiArgs);\n}\n\nPromise.promisify = function (fn, options) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"expecting a function but got \" + util.classString(fn));\n    }\n    if (isPromisified(fn)) {\n        return fn;\n    }\n    options = Object(options);\n    var receiver = options.context === undefined ? THIS : options.context;\n    var multiArgs = !!options.multiArgs;\n    var ret = promisify(fn, receiver, multiArgs);\n    util.copyDescriptors(fn, ret, propsFilter);\n    return ret;\n};\n\nPromise.promisifyAll = function (target, options) {\n    if (typeof target !== \"function\" && typeof target !== \"object\") {\n        throw new TypeError(\"the target of promisifyAll must be an object or a function\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    options = Object(options);\n    var multiArgs = !!options.multiArgs;\n    var suffix = options.suffix;\n    if (typeof suffix !== \"string\") suffix = defaultSuffix;\n    var filter = options.filter;\n    if (typeof filter !== \"function\") filter = defaultFilter;\n    var promisifier = options.promisifier;\n    if (typeof promisifier !== \"function\") promisifier = makeNodePromisified;\n\n    if (!util.isIdentifier(suffix)) {\n        throw new RangeError(\"suffix must be a valid identifier\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n\n    var keys = util.inheritedDataKeys(target);\n    for (var i = 0; i < keys.length; ++i) {\n        var value = target[keys[i]];\n        if (keys[i] !== \"constructor\" &&\n            util.isClass(value)) {\n            promisifyAll(value.prototype, suffix, filter, promisifier,\n                multiArgs);\n            promisifyAll(value, suffix, filter, promisifier, multiArgs);\n        }\n    }\n\n    return promisifyAll(target, suffix, filter, promisifier, multiArgs);\n};\n};\n\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "115",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/promisify.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 12248,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 12246,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 12241,
              "count": 1
            },
            {
              "startOffset": 9314,
              "endOffset": 9342,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "defaultFilter",
          "ranges": [
            {
              "startOffset": 708,
              "endOffset": 830,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "propsFilter",
          "ranges": [
            {
              "startOffset": 833,
              "endOffset": 904,
              "count": 5
            },
            {
              "startOffset": 902,
              "endOffset": 903,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isPromisified",
          "ranges": [
            {
              "startOffset": 906,
              "endOffset": 1042,
              "count": 1
            },
            {
              "startOffset": 990,
              "endOffset": 1041,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "hasPromisified",
          "ranges": [
            {
              "startOffset": 1044,
              "endOffset": 1262,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkValid",
          "ranges": [
            {
              "startOffset": 1263,
              "endOffset": 1854,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "promisifiableMethods",
          "ranges": [
            {
              "startOffset": 1856,
              "endOffset": 2497,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "escapeIdentRegex",
          "ranges": [
            {
              "startOffset": 2522,
              "endOffset": 2579,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "switchCaseArgumentOrder",
          "ranges": [
            {
              "startOffset": 2655,
              "endOffset": 2965,
              "count": 1
            },
            {
              "startOffset": 2919,
              "endOffset": 2947,
              "count": 2
            },
            {
              "startOffset": 2963,
              "endOffset": 2964,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "argumentSequence",
          "ranges": [
            {
              "startOffset": 2991,
              "endOffset": 3074,
              "count": 4
            },
            {
              "startOffset": 3072,
              "endOffset": 3073,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "parameterDeclaration",
          "ranges": [
            {
              "startOffset": 3104,
              "endOffset": 3211,
              "count": 1
            },
            {
              "startOffset": 3209,
              "endOffset": 3210,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "parameterCount",
          "ranges": [
            {
              "startOffset": 3235,
              "endOffset": 3371,
              "count": 1
            },
            {
              "startOffset": 3349,
              "endOffset": 3370,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeNodePromisifiedEval",
          "ranges": [
            {
              "startOffset": 3400,
              "endOffset": 8280,
              "count": 1
            },
            {
              "startOffset": 5614,
              "endOffset": 5660,
              "count": 0
            },
            {
              "startOffset": 8278,
              "endOffset": 8279,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateCallForArgumentCount",
          "ranges": [
            {
              "startOffset": 3678,
              "endOffset": 4234,
              "count": 4
            },
            {
              "startOffset": 3810,
              "endOffset": 3816,
              "count": 3
            },
            {
              "startOffset": 3817,
              "endOffset": 3821,
              "count": 1
            },
            {
              "startOffset": 3957,
              "endOffset": 4161,
              "count": 0
            },
            {
              "startOffset": 4228,
              "endOffset": 4233,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateArgumentSwitchCase",
          "ranges": [
            {
              "startOffset": 4240,
              "endOffset": 5525,
              "count": 1
            },
            {
              "startOffset": 4357,
              "endOffset": 4485,
              "count": 4
            },
            {
              "startOffset": 5453,
              "endOffset": 5496,
              "count": 0
            },
            {
              "startOffset": 5519,
              "endOffset": 5524,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeNodePromisifiedClosure",
          "ranges": [
            {
              "startOffset": 8285,
              "endOffset": 9240,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "promisifyAll",
          "ranges": [
            {
              "startOffset": 9345,
              "endOffset": 10296,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "promisify",
          "ranges": [
            {
              "startOffset": 10298,
              "endOffset": 10473,
              "count": 1
            },
            {
              "startOffset": 10471,
              "endOffset": 10472,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.promisify",
          "ranges": [
            {
              "startOffset": 10495,
              "endOffset": 10963,
              "count": 1
            },
            {
              "startOffset": 10554,
              "endOffset": 10646,
              "count": 0
            },
            {
              "startOffset": 10674,
              "endOffset": 10700,
              "count": 0
            },
            {
              "startOffset": 10788,
              "endOffset": 10805,
              "count": 0
            },
            {
              "startOffset": 10961,
              "endOffset": 10962,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Promise.promisifyAll",
          "ranges": [
            {
              "startOffset": 10989,
              "endOffset": 12238,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(\n    Promise, PromiseArray, tryConvertToPromise, apiRejection) {\nvar util = require(\"./util\");\nvar isObject = util.isObject;\nvar es5 = require(\"./es5\");\nvar Es6Map;\nif (typeof Map === \"function\") Es6Map = Map;\n\nvar mapToEntries = (function() {\n    var index = 0;\n    var size = 0;\n\n    function extractEntry(value, key) {\n        this[index] = value;\n        this[index + size] = key;\n        index++;\n    }\n\n    return function mapToEntries(map) {\n        size = map.size;\n        index = 0;\n        var ret = new Array(map.size * 2);\n        map.forEach(extractEntry, ret);\n        return ret;\n    };\n})();\n\nvar entriesToMap = function(entries) {\n    var ret = new Es6Map();\n    var length = entries.length / 2 | 0;\n    for (var i = 0; i < length; ++i) {\n        var key = entries[length + i];\n        var value = entries[i];\n        ret.set(key, value);\n    }\n    return ret;\n};\n\nfunction PropertiesPromiseArray(obj) {\n    var isMap = false;\n    var entries;\n    if (Es6Map !== undefined && obj instanceof Es6Map) {\n        entries = mapToEntries(obj);\n        isMap = true;\n    } else {\n        var keys = es5.keys(obj);\n        var len = keys.length;\n        entries = new Array(len * 2);\n        for (var i = 0; i < len; ++i) {\n            var key = keys[i];\n            entries[i] = obj[key];\n            entries[i + len] = key;\n        }\n    }\n    this.constructor$(entries);\n    this._isMap = isMap;\n    this._init$(undefined, isMap ? -6 : -3);\n}\nutil.inherits(PropertiesPromiseArray, PromiseArray);\n\nPropertiesPromiseArray.prototype._init = function () {};\n\nPropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {\n    this._values[index] = value;\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= this._length) {\n        var val;\n        if (this._isMap) {\n            val = entriesToMap(this._values);\n        } else {\n            val = {};\n            var keyOffset = this.length();\n            for (var i = 0, len = this.length(); i < len; ++i) {\n                val[this._values[i + keyOffset]] = this._values[i];\n            }\n        }\n        this._resolve(val);\n        return true;\n    }\n    return false;\n};\n\nPropertiesPromiseArray.prototype.shouldCopyValues = function () {\n    return false;\n};\n\nPropertiesPromiseArray.prototype.getActualLength = function (len) {\n    return len >> 1;\n};\n\nfunction props(promises) {\n    var ret;\n    var castValue = tryConvertToPromise(promises);\n\n    if (!isObject(castValue)) {\n        return apiRejection(\"cannot await properties of a non-object\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    } else if (castValue instanceof Promise) {\n        ret = castValue._then(\n            Promise.props, undefined, undefined, undefined, undefined);\n    } else {\n        ret = new PropertiesPromiseArray(castValue).promise();\n    }\n\n    if (castValue instanceof Promise) {\n        ret._propagateFrom(castValue, 2);\n    }\n    return ret;\n}\n\nPromise.prototype.props = function () {\n    return props(this);\n};\n\nPromise.props = function (promises) {\n    return props(promises);\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "116",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/props.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 3183,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 3181,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 3177,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 333,
              "endOffset": 706,
              "count": 1
            },
            {
              "startOffset": 704,
              "endOffset": 705,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "extractEntry",
          "ranges": [
            {
              "startOffset": 388,
              "endOffset": 509,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "mapToEntries",
          "ranges": [
            {
              "startOffset": 522,
              "endOffset": 703,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "entriesToMap",
          "ranges": [
            {
              "startOffset": 731,
              "endOffset": 982,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PropertiesPromiseArray",
          "ranges": [
            {
              "startOffset": 985,
              "endOffset": 1557,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PropertiesPromiseArray._init",
          "ranges": [
            {
              "startOffset": 1653,
              "endOffset": 1667,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PropertiesPromiseArray._promiseFulfilled",
          "ranges": [
            {
              "startOffset": 1723,
              "endOffset": 2273,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PropertiesPromiseArray.shouldCopyValues",
          "ranges": [
            {
              "startOffset": 2328,
              "endOffset": 2361,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PropertiesPromiseArray.getActualLength",
          "ranges": [
            {
              "startOffset": 2415,
              "endOffset": 2454,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "props",
          "ranges": [
            {
              "startOffset": 2457,
              "endOffset": 3037,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.props",
          "ranges": [
            {
              "startOffset": 3065,
              "endOffset": 3104,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.props",
          "ranges": [
            {
              "startOffset": 3123,
              "endOffset": 3174,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nfunction arrayMove(src, srcIndex, dst, dstIndex, len) {\n    for (var j = 0; j < len; ++j) {\n        dst[j + dstIndex] = src[j + srcIndex];\n        src[j + srcIndex] = void 0;\n    }\n}\n\nfunction Queue(capacity) {\n    this._capacity = capacity;\n    this._length = 0;\n    this._front = 0;\n}\n\nQueue.prototype._willBeOverCapacity = function (size) {\n    return this._capacity < size;\n};\n\nQueue.prototype._pushOne = function (arg) {\n    var length = this.length();\n    this._checkCapacity(length + 1);\n    var i = (this._front + length) & (this._capacity - 1);\n    this[i] = arg;\n    this._length = length + 1;\n};\n\nQueue.prototype.push = function (fn, receiver, arg) {\n    var length = this.length() + 3;\n    if (this._willBeOverCapacity(length)) {\n        this._pushOne(fn);\n        this._pushOne(receiver);\n        this._pushOne(arg);\n        return;\n    }\n    var j = this._front + length - 3;\n    this._checkCapacity(length);\n    var wrapMask = this._capacity - 1;\n    this[(j + 0) & wrapMask] = fn;\n    this[(j + 1) & wrapMask] = receiver;\n    this[(j + 2) & wrapMask] = arg;\n    this._length = length;\n};\n\nQueue.prototype.shift = function () {\n    var front = this._front,\n        ret = this[front];\n\n    this[front] = undefined;\n    this._front = (front + 1) & (this._capacity - 1);\n    this._length--;\n    return ret;\n};\n\nQueue.prototype.length = function () {\n    return this._length;\n};\n\nQueue.prototype._checkCapacity = function (size) {\n    if (this._capacity < size) {\n        this._resizeTo(this._capacity << 1);\n    }\n};\n\nQueue.prototype._resizeTo = function (capacity) {\n    var oldCapacity = this._capacity;\n    this._capacity = capacity;\n    var front = this._front;\n    var length = this._length;\n    var moveItemsCount = (front + length) & (oldCapacity - 1);\n    arrayMove(this, 0, this, oldCapacity, moveItemsCount);\n};\n\nmodule.exports = Queue;\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "70",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/queue.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1939,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1937,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "arrayMove",
          "ranges": [
            {
              "startOffset": 76,
              "endOffset": 258,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue",
          "ranges": [
            {
              "startOffset": 260,
              "endOffset": 362,
              "count": 2
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Queue._willBeOverCapacity",
          "ranges": [
            {
              "startOffset": 402,
              "endOffset": 455,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue._pushOne",
          "ranges": [
            {
              "startOffset": 485,
              "endOffset": 681,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue.push",
          "ranges": [
            {
              "startOffset": 707,
              "endOffset": 1178,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue.shift",
          "ranges": [
            {
              "startOffset": 1205,
              "endOffset": 1396,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue.length",
          "ranges": [
            {
              "startOffset": 1424,
              "endOffset": 1464,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue._checkCapacity",
          "ranges": [
            {
              "startOffset": 1500,
              "endOffset": 1603,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Queue._resizeTo",
          "ranges": [
            {
              "startOffset": 1634,
              "endOffset": 1908,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(\n    Promise, INTERNAL, tryConvertToPromise, apiRejection) {\nvar util = require(\"./util\");\n\nvar raceLater = function (promise) {\n    return promise.then(function(array) {\n        return race(array, promise);\n    });\n};\n\nfunction race(promises, parent) {\n    var maybePromise = tryConvertToPromise(promises);\n\n    if (maybePromise instanceof Promise) {\n        return raceLater(maybePromise);\n    } else {\n        promises = util.asArray(promises);\n        if (promises === null)\n            return apiRejection(\"expecting an array or an iterable object but got \" + util.classString(promises));\n    }\n\n    var ret = new Promise(INTERNAL);\n    if (parent !== undefined) {\n        ret._propagateFrom(parent, 3);\n    }\n    var fulfill = ret._fulfill;\n    var reject = ret._reject;\n    for (var i = 0, len = promises.length; i < len; ++i) {\n        var val = promises[i];\n\n        if (val === undefined && !(i in promises)) {\n            continue;\n        }\n\n        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);\n    }\n    return ret;\n}\n\nPromise.race = function (promises) {\n    return race(promises, undefined);\n};\n\nPromise.prototype.race = function () {\n    return race(this, undefined);\n};\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "117",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/race.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1316,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1314,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 1310,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "raceLater",
          "ranges": [
            {
              "startOffset": 210,
              "endOffset": 319,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "race",
          "ranges": [
            {
              "startOffset": 322,
              "endOffset": 1151,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.race",
          "ranges": [
            {
              "startOffset": 1168,
              "endOffset": 1229,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.race",
          "ranges": [
            {
              "startOffset": 1257,
              "endOffset": 1306,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise,\n                          PromiseArray,\n                          apiRejection,\n                          tryConvertToPromise,\n                          INTERNAL,\n                          debug) {\nvar getDomain = Promise._getDomain;\nvar util = require(\"./util\");\nvar tryCatch = util.tryCatch;\n\nfunction ReductionPromiseArray(promises, fn, initialValue, _each) {\n    this.constructor$(promises);\n    var domain = getDomain();\n    this._fn = domain === null ? fn : util.domainBind(domain, fn);\n    if (initialValue !== undefined) {\n        initialValue = Promise.resolve(initialValue);\n        initialValue._attachCancellationCallback(this);\n    }\n    this._initialValue = initialValue;\n    this._currentCancellable = null;\n    if(_each === INTERNAL) {\n        this._eachValues = Array(this._length);\n    } else if (_each === 0) {\n        this._eachValues = null;\n    } else {\n        this._eachValues = undefined;\n    }\n    this._promise._captureStackTrace();\n    this._init$(undefined, -5);\n}\nutil.inherits(ReductionPromiseArray, PromiseArray);\n\nReductionPromiseArray.prototype._gotAccum = function(accum) {\n    if (this._eachValues !== undefined && \n        this._eachValues !== null && \n        accum !== INTERNAL) {\n        this._eachValues.push(accum);\n    }\n};\n\nReductionPromiseArray.prototype._eachComplete = function(value) {\n    if (this._eachValues !== null) {\n        this._eachValues.push(value);\n    }\n    return this._eachValues;\n};\n\nReductionPromiseArray.prototype._init = function() {};\n\nReductionPromiseArray.prototype._resolveEmptyArray = function() {\n    this._resolve(this._eachValues !== undefined ? this._eachValues\n                                                 : this._initialValue);\n};\n\nReductionPromiseArray.prototype.shouldCopyValues = function () {\n    return false;\n};\n\nReductionPromiseArray.prototype._resolve = function(value) {\n    this._promise._resolveCallback(value);\n    this._values = null;\n};\n\nReductionPromiseArray.prototype._resultCancelled = function(sender) {\n    if (sender === this._initialValue) return this._cancel();\n    if (this._isResolved()) return;\n    this._resultCancelled$();\n    if (this._currentCancellable instanceof Promise) {\n        this._currentCancellable.cancel();\n    }\n    if (this._initialValue instanceof Promise) {\n        this._initialValue.cancel();\n    }\n};\n\nReductionPromiseArray.prototype._iterate = function (values) {\n    this._values = values;\n    var value;\n    var i;\n    var length = values.length;\n    if (this._initialValue !== undefined) {\n        value = this._initialValue;\n        i = 0;\n    } else {\n        value = Promise.resolve(values[0]);\n        i = 1;\n    }\n\n    this._currentCancellable = value;\n\n    if (!value.isRejected()) {\n        for (; i < length; ++i) {\n            var ctx = {\n                accum: null,\n                value: values[i],\n                index: i,\n                length: length,\n                array: this\n            };\n            value = value._then(gotAccum, undefined, undefined, ctx, undefined);\n        }\n    }\n\n    if (this._eachValues !== undefined) {\n        value = value\n            ._then(this._eachComplete, undefined, undefined, this, undefined);\n    }\n    value._then(completed, completed, undefined, value, this);\n};\n\nPromise.prototype.reduce = function (fn, initialValue) {\n    return reduce(this, fn, initialValue, null);\n};\n\nPromise.reduce = function (promises, fn, initialValue, _each) {\n    return reduce(promises, fn, initialValue, _each);\n};\n\nfunction completed(valueOrReason, array) {\n    if (this.isFulfilled()) {\n        array._resolve(valueOrReason);\n    } else {\n        array._reject(valueOrReason);\n    }\n}\n\nfunction reduce(promises, fn, initialValue, _each) {\n    if (typeof fn !== \"function\") {\n        return apiRejection(\"expecting a function but got \" + util.classString(fn));\n    }\n    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);\n    return array.promise();\n}\n\nfunction gotAccum(accum) {\n    this.accum = accum;\n    this.array._gotAccum(accum);\n    var value = tryConvertToPromise(this.value, this.array._promise);\n    if (value instanceof Promise) {\n        this.array._currentCancellable = value;\n        return value._then(gotValue, undefined, undefined, this, undefined);\n    } else {\n        return gotValue.call(this, value);\n    }\n}\n\nfunction gotValue(value) {\n    var array = this.array;\n    var promise = array._promise;\n    var fn = tryCatch(array._fn);\n    promise._pushContext();\n    var ret;\n    if (array._eachValues !== undefined) {\n        ret = fn.call(promise._boundValue(), value, this.index, this.length);\n    } else {\n        ret = fn.call(promise._boundValue(),\n                              this.accum, value, this.index, this.length);\n    }\n    if (ret instanceof Promise) {\n        array._currentCancellable = ret;\n    }\n    var promiseCreated = promise._popContext();\n    debug.checkForgottenReturns(\n        ret,\n        promiseCreated,\n        array._eachValues !== undefined ? \"Promise.each\" : \"Promise.reduce\",\n        promise\n    );\n    return ret;\n}\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "118",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/reduce.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 5192,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 5190,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 5186,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "ReductionPromiseArray",
          "ranges": [
            {
              "startOffset": 406,
              "endOffset": 1104,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._gotAccum",
          "ranges": [
            {
              "startOffset": 1202,
              "endOffset": 1376,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._eachComplete",
          "ranges": [
            {
              "startOffset": 1427,
              "endOffset": 1556,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._init",
          "ranges": [
            {
              "startOffset": 1599,
              "endOffset": 1612,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._resolveEmptyArray",
          "ranges": [
            {
              "startOffset": 1668,
              "endOffset": 1822,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray.shouldCopyValues",
          "ranges": [
            {
              "startOffset": 1876,
              "endOffset": 1909,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._resolve",
          "ranges": [
            {
              "startOffset": 1955,
              "endOffset": 2042,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._resultCancelled",
          "ranges": [
            {
              "startOffset": 2096,
              "endOffset": 2440,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReductionPromiseArray._iterate",
          "ranges": [
            {
              "startOffset": 2486,
              "endOffset": 3368,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.reduce",
          "ranges": [
            {
              "startOffset": 3398,
              "endOffset": 3478,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.reduce",
          "ranges": [
            {
              "startOffset": 3498,
              "endOffset": 3600,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "completed",
          "ranges": [
            {
              "startOffset": 3603,
              "endOffset": 3773,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "reduce",
          "ranges": [
            {
              "startOffset": 3775,
              "endOffset": 4062,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "gotAccum",
          "ranges": [
            {
              "startOffset": 4064,
              "endOffset": 4442,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "gotValue",
          "ranges": [
            {
              "startOffset": 4444,
              "endOffset": 5184,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar util = require(\"./util\");\nvar schedule;\nvar noAsyncScheduler = function() {\n    throw new Error(\"No async scheduler available\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n};\nvar NativePromise = util.getNativePromise();\nif (util.isNode && typeof MutationObserver === \"undefined\") {\n    var GlobalSetImmediate = global.setImmediate;\n    var ProcessNextTick = process.nextTick;\n    schedule = util.isRecentNode\n                ? function(fn) { GlobalSetImmediate.call(global, fn); }\n                : function(fn) { ProcessNextTick.call(process, fn); };\n} else if (typeof NativePromise === \"function\" &&\n           typeof NativePromise.resolve === \"function\") {\n    var nativePromise = NativePromise.resolve();\n    schedule = function(fn) {\n        nativePromise.then(fn);\n    };\n} else if ((typeof MutationObserver !== \"undefined\") &&\n          !(typeof window !== \"undefined\" &&\n            window.navigator &&\n            (window.navigator.standalone || window.cordova))) {\n    schedule = (function() {\n        var div = document.createElement(\"div\");\n        var opts = {attributes: true};\n        var toggleScheduled = false;\n        var div2 = document.createElement(\"div\");\n        var o2 = new MutationObserver(function() {\n            div.classList.toggle(\"foo\");\n            toggleScheduled = false;\n        });\n        o2.observe(div2, opts);\n\n        var scheduleToggle = function() {\n            if (toggleScheduled) return;\n            toggleScheduled = true;\n            div2.classList.toggle(\"foo\");\n        };\n\n        return function schedule(fn) {\n            var o = new MutationObserver(function() {\n                o.disconnect();\n                fn();\n            });\n            o.observe(div, opts);\n            scheduleToggle();\n        };\n    })();\n} else if (typeof setImmediate !== \"undefined\") {\n    schedule = function (fn) {\n        setImmediate(fn);\n    };\n} else if (typeof setTimeout !== \"undefined\") {\n    schedule = function (fn) {\n        setTimeout(fn, 0);\n    };\n} else {\n    schedule = noAsyncScheduler;\n}\nmodule.exports = schedule;\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "69",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/schedule.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2159,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2157,
              "count": 1
            },
            {
              "startOffset": 580,
              "endOffset": 633,
              "count": 0
            },
            {
              "startOffset": 636,
              "endOffset": 2127,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "noAsyncScheduler",
          "ranges": [
            {
              "startOffset": 143,
              "endOffset": 256,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "schedule",
          "ranges": [
            {
              "startOffset": 510,
              "endOffset": 563,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "schedule",
          "ranges": [
            {
              "startOffset": 582,
              "endOffset": 633,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "schedule",
          "ranges": [
            {
              "startOffset": 807,
              "endOffset": 859,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1074,
              "endOffset": 1852,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "schedule",
          "ranges": [
            {
              "startOffset": 1922,
              "endOffset": 1969,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "schedule",
          "ranges": [
            {
              "startOffset": 2034,
              "endOffset": 2082,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports =\n    function(Promise, PromiseArray, debug) {\nvar PromiseInspection = Promise.PromiseInspection;\nvar util = require(\"./util\");\n\nfunction SettledPromiseArray(values) {\n    this.constructor$(values);\n}\nutil.inherits(SettledPromiseArray, PromiseArray);\n\nSettledPromiseArray.prototype._promiseResolved = function (index, inspection) {\n    this._values[index] = inspection;\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= this._length) {\n        this._resolve(this._values);\n        return true;\n    }\n    return false;\n};\n\nSettledPromiseArray.prototype._promiseFulfilled = function (value, index) {\n    var ret = new PromiseInspection();\n    ret._bitField = 33554432;\n    ret._settledValueField = value;\n    return this._promiseResolved(index, ret);\n};\nSettledPromiseArray.prototype._promiseRejected = function (reason, index) {\n    var ret = new PromiseInspection();\n    ret._bitField = 16777216;\n    ret._settledValueField = reason;\n    return this._promiseResolved(index, ret);\n};\n\nPromise.settle = function (promises) {\n    debug.deprecated(\".settle()\", \".reflect()\");\n    return new SettledPromiseArray(promises).promise();\n};\n\nPromise.prototype.settle = function () {\n    return Promise.settle(this);\n};\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "119",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/settle.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1329,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 1327,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 97,
              "endOffset": 1323,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "SettledPromiseArray",
          "ranges": [
            {
              "startOffset": 220,
              "endOffset": 291,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SettledPromiseArray._promiseResolved",
          "ranges": [
            {
              "startOffset": 392,
              "endOffset": 632,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SettledPromiseArray._promiseFulfilled",
          "ranges": [
            {
              "startOffset": 685,
              "endOffset": 863,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SettledPromiseArray._promiseRejected",
          "ranges": [
            {
              "startOffset": 914,
              "endOffset": 1094,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.settle",
          "ranges": [
            {
              "startOffset": 1114,
              "endOffset": 1242,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.settle",
          "ranges": [
            {
              "startOffset": 1272,
              "endOffset": 1320,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports =\nfunction(Promise, PromiseArray, apiRejection) {\nvar util = require(\"./util\");\nvar RangeError = require(\"./errors\").RangeError;\nvar AggregateError = require(\"./errors\").AggregateError;\nvar isArray = util.isArray;\nvar CANCELLATION = {};\n\n\nfunction SomePromiseArray(values) {\n    this.constructor$(values);\n    this._howMany = 0;\n    this._unwrap = false;\n    this._initialized = false;\n}\nutil.inherits(SomePromiseArray, PromiseArray);\n\nSomePromiseArray.prototype._init = function () {\n    if (!this._initialized) {\n        return;\n    }\n    if (this._howMany === 0) {\n        this._resolve([]);\n        return;\n    }\n    this._init$(undefined, -5);\n    var isArrayResolved = isArray(this._values);\n    if (!this._isResolved() &&\n        isArrayResolved &&\n        this._howMany > this._canPossiblyFulfill()) {\n        this._reject(this._getRangeError(this.length()));\n    }\n};\n\nSomePromiseArray.prototype.init = function () {\n    this._initialized = true;\n    this._init();\n};\n\nSomePromiseArray.prototype.setUnwrap = function () {\n    this._unwrap = true;\n};\n\nSomePromiseArray.prototype.howMany = function () {\n    return this._howMany;\n};\n\nSomePromiseArray.prototype.setHowMany = function (count) {\n    this._howMany = count;\n};\n\nSomePromiseArray.prototype._promiseFulfilled = function (value) {\n    this._addFulfilled(value);\n    if (this._fulfilled() === this.howMany()) {\n        this._values.length = this.howMany();\n        if (this.howMany() === 1 && this._unwrap) {\n            this._resolve(this._values[0]);\n        } else {\n            this._resolve(this._values);\n        }\n        return true;\n    }\n    return false;\n\n};\nSomePromiseArray.prototype._promiseRejected = function (reason) {\n    this._addRejected(reason);\n    return this._checkOutcome();\n};\n\nSomePromiseArray.prototype._promiseCancelled = function () {\n    if (this._values instanceof Promise || this._values == null) {\n        return this._cancel();\n    }\n    this._addRejected(CANCELLATION);\n    return this._checkOutcome();\n};\n\nSomePromiseArray.prototype._checkOutcome = function() {\n    if (this.howMany() > this._canPossiblyFulfill()) {\n        var e = new AggregateError();\n        for (var i = this.length(); i < this._values.length; ++i) {\n            if (this._values[i] !== CANCELLATION) {\n                e.push(this._values[i]);\n            }\n        }\n        if (e.length > 0) {\n            this._reject(e);\n        } else {\n            this._cancel();\n        }\n        return true;\n    }\n    return false;\n};\n\nSomePromiseArray.prototype._fulfilled = function () {\n    return this._totalResolved;\n};\n\nSomePromiseArray.prototype._rejected = function () {\n    return this._values.length - this.length();\n};\n\nSomePromiseArray.prototype._addRejected = function (reason) {\n    this._values.push(reason);\n};\n\nSomePromiseArray.prototype._addFulfilled = function (value) {\n    this._values[this._totalResolved++] = value;\n};\n\nSomePromiseArray.prototype._canPossiblyFulfill = function () {\n    return this.length() - this._rejected();\n};\n\nSomePromiseArray.prototype._getRangeError = function (count) {\n    var message = \"Input array must contain at least \" +\n            this._howMany + \" items but contains only \" + count + \" items\";\n    return new RangeError(message);\n};\n\nSomePromiseArray.prototype._resolveEmptyArray = function () {\n    this._reject(this._getRangeError(0));\n};\n\nfunction some(promises, howMany) {\n    if ((howMany | 0) !== howMany || howMany < 0) {\n        return apiRejection(\"expecting a positive integer\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    var ret = new SomePromiseArray(promises);\n    var promise = ret.promise();\n    ret.setHowMany(howMany);\n    ret.init();\n    return promise;\n}\n\nPromise.some = function (promises, howMany) {\n    return some(promises, howMany);\n};\n\nPromise.prototype.some = function (howMany) {\n    return some(this, howMany);\n};\n\nPromise._SomePromiseArray = SomePromiseArray;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "120",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/some.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 4025,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 4023,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 4019,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "SomePromiseArray",
          "ranges": [
            {
              "startOffset": 330,
              "endOffset": 478,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._init",
          "ranges": [
            {
              "startOffset": 562,
              "endOffset": 966,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray.init",
          "ranges": [
            {
              "startOffset": 1003,
              "endOffset": 1066,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray.setUnwrap",
          "ranges": [
            {
              "startOffset": 1108,
              "endOffset": 1148,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray.howMany",
          "ranges": [
            {
              "startOffset": 1188,
              "endOffset": 1229,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray.setHowMany",
          "ranges": [
            {
              "startOffset": 1272,
              "endOffset": 1319,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._promiseFulfilled",
          "ranges": [
            {
              "startOffset": 1369,
              "endOffset": 1724,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._promiseRejected",
          "ranges": [
            {
              "startOffset": 1772,
              "endOffset": 1857,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._promiseCancelled",
          "ranges": [
            {
              "startOffset": 1907,
              "endOffset": 2096,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._checkOutcome",
          "ranges": [
            {
              "startOffset": 2142,
              "endOffset": 2591,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._fulfilled",
          "ranges": [
            {
              "startOffset": 2634,
              "endOffset": 2681,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._rejected",
          "ranges": [
            {
              "startOffset": 2723,
              "endOffset": 2786,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._addRejected",
          "ranges": [
            {
              "startOffset": 2831,
              "endOffset": 2883,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._addFulfilled",
          "ranges": [
            {
              "startOffset": 2929,
              "endOffset": 2998,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._canPossiblyFulfill",
          "ranges": [
            {
              "startOffset": 3050,
              "endOffset": 3110,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._getRangeError",
          "ranges": [
            {
              "startOffset": 3157,
              "endOffset": 3346,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SomePromiseArray._resolveEmptyArray",
          "ranges": [
            {
              "startOffset": 3397,
              "endOffset": 3454,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "some",
          "ranges": [
            {
              "startOffset": 3457,
              "endOffset": 3802,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.some",
          "ranges": [
            {
              "startOffset": 3819,
              "endOffset": 3887,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.some",
          "ranges": [
            {
              "startOffset": 3915,
              "endOffset": 3969,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise) {\nfunction PromiseInspection(promise) {\n    if (promise !== undefined) {\n        promise = promise._target();\n        this._bitField = promise._bitField;\n        this._settledValueField = promise._isFateSealed()\n            ? promise._settledValue() : undefined;\n    }\n    else {\n        this._bitField = 0;\n        this._settledValueField = undefined;\n    }\n}\n\nPromiseInspection.prototype._settledValue = function() {\n    return this._settledValueField;\n};\n\nvar value = PromiseInspection.prototype.value = function () {\n    if (!this.isFulfilled()) {\n        throw new TypeError(\"cannot get fulfillment value of a non-fulfilled promise\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    return this._settledValue();\n};\n\nvar reason = PromiseInspection.prototype.error =\nPromiseInspection.prototype.reason = function () {\n    if (!this.isRejected()) {\n        throw new TypeError(\"cannot get rejection reason of a non-rejected promise\\u000a\\u000a    See http://goo.gl/MqrFmX\\u000a\");\n    }\n    return this._settledValue();\n};\n\nvar isFulfilled = PromiseInspection.prototype.isFulfilled = function() {\n    return (this._bitField & 33554432) !== 0;\n};\n\nvar isRejected = PromiseInspection.prototype.isRejected = function () {\n    return (this._bitField & 16777216) !== 0;\n};\n\nvar isPending = PromiseInspection.prototype.isPending = function () {\n    return (this._bitField & 50397184) === 0;\n};\n\nvar isResolved = PromiseInspection.prototype.isResolved = function () {\n    return (this._bitField & 50331648) !== 0;\n};\n\nPromiseInspection.prototype.isCancelled = function() {\n    return (this._bitField & 8454144) !== 0;\n};\n\nPromise.prototype.__isCancelled = function() {\n    return (this._bitField & 65536) === 65536;\n};\n\nPromise.prototype._isCancelled = function() {\n    return this._target().__isCancelled();\n};\n\nPromise.prototype.isCancelled = function() {\n    return (this._target()._bitField & 8454144) !== 0;\n};\n\nPromise.prototype.isPending = function() {\n    return isPending.call(this._target());\n};\n\nPromise.prototype.isRejected = function() {\n    return isRejected.call(this._target());\n};\n\nPromise.prototype.isFulfilled = function() {\n    return isFulfilled.call(this._target());\n};\n\nPromise.prototype.isResolved = function() {\n    return isResolved.call(this._target());\n};\n\nPromise.prototype.value = function() {\n    return value.call(this._target());\n};\n\nPromise.prototype.reason = function() {\n    var target = this._target();\n    target._unsetRejectionIsUnhandled();\n    return reason.call(target);\n};\n\nPromise.prototype._value = function() {\n    return this._settledValue();\n};\n\nPromise.prototype._reason = function() {\n    this._unsetRejectionIsUnhandled();\n    return this._settledValue();\n};\n\nPromise.PromiseInspection = PromiseInspection;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "83",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/synchronous_inspection.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2879,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2877,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 2873,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "PromiseInspection",
          "ranges": [
            {
              "startOffset": 113,
              "endOffset": 471,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection._settledValue",
          "ranges": [
            {
              "startOffset": 517,
              "endOffset": 567,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.value",
          "ranges": [
            {
              "startOffset": 618,
              "endOffset": 837,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.error.PromiseInspection.reason",
          "ranges": [
            {
              "startOffset": 926,
              "endOffset": 1142,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.isFulfilled",
          "ranges": [
            {
              "startOffset": 1205,
              "endOffset": 1265,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.isRejected",
          "ranges": [
            {
              "startOffset": 1326,
              "endOffset": 1387,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.isPending",
          "ranges": [
            {
              "startOffset": 1446,
              "endOffset": 1507,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.isResolved",
          "ranges": [
            {
              "startOffset": 1568,
              "endOffset": 1629,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseInspection.isCancelled",
          "ranges": [
            {
              "startOffset": 1674,
              "endOffset": 1733,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.__isCancelled",
          "ranges": [
            {
              "startOffset": 1770,
              "endOffset": 1831,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isCancelled",
          "ranges": [
            {
              "startOffset": 1867,
              "endOffset": 1924,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.isCancelled",
          "ranges": [
            {
              "startOffset": 1959,
              "endOffset": 2028,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.isPending",
          "ranges": [
            {
              "startOffset": 2061,
              "endOffset": 2118,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.isRejected",
          "ranges": [
            {
              "startOffset": 2152,
              "endOffset": 2210,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.isFulfilled",
          "ranges": [
            {
              "startOffset": 2245,
              "endOffset": 2304,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.isResolved",
          "ranges": [
            {
              "startOffset": 2338,
              "endOffset": 2396,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.value",
          "ranges": [
            {
              "startOffset": 2425,
              "endOffset": 2478,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.reason",
          "ranges": [
            {
              "startOffset": 2508,
              "endOffset": 2628,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._value",
          "ranges": [
            {
              "startOffset": 2658,
              "endOffset": 2705,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._reason",
          "ranges": [
            {
              "startOffset": 2736,
              "endOffset": 2822,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL) {\nvar util = require(\"./util\");\nvar errorObj = util.errorObj;\nvar isObject = util.isObject;\n\nfunction tryConvertToPromise(obj, context) {\n    if (isObject(obj)) {\n        if (obj instanceof Promise) return obj;\n        var then = getThen(obj);\n        if (then === errorObj) {\n            if (context) context._pushContext();\n            var ret = Promise.reject(then.e);\n            if (context) context._popContext();\n            return ret;\n        } else if (typeof then === \"function\") {\n            if (isAnyBluebirdPromise(obj)) {\n                var ret = new Promise(INTERNAL);\n                obj._then(\n                    ret._fulfill,\n                    ret._reject,\n                    undefined,\n                    ret,\n                    null\n                );\n                return ret;\n            }\n            return doThenable(obj, then, context);\n        }\n    }\n    return obj;\n}\n\nfunction doGetThen(obj) {\n    return obj.then;\n}\n\nfunction getThen(obj) {\n    try {\n        return doGetThen(obj);\n    } catch (e) {\n        errorObj.e = e;\n        return errorObj;\n    }\n}\n\nvar hasProp = {}.hasOwnProperty;\nfunction isAnyBluebirdPromise(obj) {\n    try {\n        return hasProp.call(obj, \"_promise0\");\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction doThenable(x, then, context) {\n    var promise = new Promise(INTERNAL);\n    var ret = promise;\n    if (context) context._pushContext();\n    promise._captureStackTrace();\n    if (context) context._popContext();\n    var synchronous = true;\n    var result = util.tryCatch(then).call(x, resolve, reject);\n    synchronous = false;\n\n    if (promise && result === errorObj) {\n        promise._rejectCallback(result.e, true, true);\n        promise = null;\n    }\n\n    function resolve(value) {\n        if (!promise) return;\n        promise._resolveCallback(value);\n        promise = null;\n    }\n\n    function reject(reason) {\n        if (!promise) return;\n        promise._rejectCallback(reason, synchronous, true);\n        promise = null;\n    }\n    return ret;\n}\n\nreturn tryConvertToPromise;\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "72",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/thenables.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2197,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2195,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 2191,
              "count": 1
            },
            {
              "startOffset": 2189,
              "endOffset": 2190,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryConvertToPromise",
          "ranges": [
            {
              "startOffset": 214,
              "endOffset": 1028,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "doGetThen",
          "ranges": [
            {
              "startOffset": 1030,
              "endOffset": 1078,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getThen",
          "ranges": [
            {
              "startOffset": 1080,
              "endOffset": 1219,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isAnyBluebirdPromise",
          "ranges": [
            {
              "startOffset": 1254,
              "endOffset": 1395,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "doThenable",
          "ranges": [
            {
              "startOffset": 1397,
              "endOffset": 2160,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function(Promise, INTERNAL, debug) {\nvar util = require(\"./util\");\nvar TimeoutError = Promise.TimeoutError;\n\nfunction HandleWrapper(handle)  {\n    this.handle = handle;\n}\n\nHandleWrapper.prototype._resultCancelled = function() {\n    clearTimeout(this.handle);\n};\n\nvar afterValue = function(value) { return delay(+this).thenReturn(value); };\nvar delay = Promise.delay = function (ms, value) {\n    var ret;\n    var handle;\n    if (value !== undefined) {\n        ret = Promise.resolve(value)\n                ._then(afterValue, null, null, ms, undefined);\n        if (debug.cancellation() && value instanceof Promise) {\n            ret._setOnCancel(value);\n        }\n    } else {\n        ret = new Promise(INTERNAL);\n        handle = setTimeout(function() { ret._fulfill(); }, +ms);\n        if (debug.cancellation()) {\n            ret._setOnCancel(new HandleWrapper(handle));\n        }\n        ret._captureStackTrace();\n    }\n    ret._setAsyncGuaranteed();\n    return ret;\n};\n\nPromise.prototype.delay = function (ms) {\n    return delay(ms, this);\n};\n\nvar afterTimeout = function (promise, message, parent) {\n    var err;\n    if (typeof message !== \"string\") {\n        if (message instanceof Error) {\n            err = message;\n        } else {\n            err = new TimeoutError(\"operation timed out\");\n        }\n    } else {\n        err = new TimeoutError(message);\n    }\n    util.markAsOriginatingFromRejection(err);\n    promise._attachExtraTrace(err);\n    promise._reject(err);\n\n    if (parent != null) {\n        parent.cancel();\n    }\n};\n\nfunction successClear(value) {\n    clearTimeout(this.handle);\n    return value;\n}\n\nfunction failureClear(reason) {\n    clearTimeout(this.handle);\n    throw reason;\n}\n\nPromise.prototype.timeout = function (ms, message) {\n    ms = +ms;\n    var ret, parent;\n\n    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {\n        if (ret.isPending()) {\n            afterTimeout(ret, message, parent);\n        }\n    }, ms));\n\n    if (debug.cancellation()) {\n        parent = this.then();\n        ret = parent._then(successClear, failureClear,\n                            undefined, handleWrapper, undefined);\n        ret._setOnCancel(handleWrapper);\n    } else {\n        ret = this._then(successClear, failureClear,\n                            undefined, handleWrapper, undefined);\n    }\n\n    return ret;\n};\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "112",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/timers.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2461,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 2459,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 2455,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "HandleWrapper",
          "ranges": [
            {
              "startOffset": 202,
              "endOffset": 263,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "HandleWrapper._resultCancelled",
          "ranges": [
            {
              "startOffset": 308,
              "endOffset": 353,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterValue",
          "ranges": [
            {
              "startOffset": 373,
              "endOffset": 431,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.delay",
          "ranges": [
            {
              "startOffset": 461,
              "endOffset": 1062,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.delay",
          "ranges": [
            {
              "startOffset": 1091,
              "endOffset": 1136,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterTimeout",
          "ranges": [
            {
              "startOffset": 1158,
              "endOffset": 1628,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "successClear",
          "ranges": [
            {
              "startOffset": 1631,
              "endOffset": 1712,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "failureClear",
          "ranges": [
            {
              "startOffset": 1714,
              "endOffset": 1796,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.timeout",
          "ranges": [
            {
              "startOffset": 1826,
              "endOffset": 2451,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nmodule.exports = function (Promise, apiRejection, tryConvertToPromise,\n    createContext, INTERNAL, debug) {\n    var util = require(\"./util\");\n    var TypeError = require(\"./errors\").TypeError;\n    var inherits = require(\"./util\").inherits;\n    var errorObj = util.errorObj;\n    var tryCatch = util.tryCatch;\n    var NULL = {};\n\n    function thrower(e) {\n        setTimeout(function(){throw e;}, 0);\n    }\n\n    function castPreservingDisposable(thenable) {\n        var maybePromise = tryConvertToPromise(thenable);\n        if (maybePromise !== thenable &&\n            typeof thenable._isDisposable === \"function\" &&\n            typeof thenable._getDisposer === \"function\" &&\n            thenable._isDisposable()) {\n            maybePromise._setDisposable(thenable._getDisposer());\n        }\n        return maybePromise;\n    }\n    function dispose(resources, inspection) {\n        var i = 0;\n        var len = resources.length;\n        var ret = new Promise(INTERNAL);\n        function iterator() {\n            if (i >= len) return ret._fulfill();\n            var maybePromise = castPreservingDisposable(resources[i++]);\n            if (maybePromise instanceof Promise &&\n                maybePromise._isDisposable()) {\n                try {\n                    maybePromise = tryConvertToPromise(\n                        maybePromise._getDisposer().tryDispose(inspection),\n                        resources.promise);\n                } catch (e) {\n                    return thrower(e);\n                }\n                if (maybePromise instanceof Promise) {\n                    return maybePromise._then(iterator, thrower,\n                                              null, null, null);\n                }\n            }\n            iterator();\n        }\n        iterator();\n        return ret;\n    }\n\n    function Disposer(data, promise, context) {\n        this._data = data;\n        this._promise = promise;\n        this._context = context;\n    }\n\n    Disposer.prototype.data = function () {\n        return this._data;\n    };\n\n    Disposer.prototype.promise = function () {\n        return this._promise;\n    };\n\n    Disposer.prototype.resource = function () {\n        if (this.promise().isFulfilled()) {\n            return this.promise().value();\n        }\n        return NULL;\n    };\n\n    Disposer.prototype.tryDispose = function(inspection) {\n        var resource = this.resource();\n        var context = this._context;\n        if (context !== undefined) context._pushContext();\n        var ret = resource !== NULL\n            ? this.doDispose(resource, inspection) : null;\n        if (context !== undefined) context._popContext();\n        this._promise._unsetDisposable();\n        this._data = null;\n        return ret;\n    };\n\n    Disposer.isDisposer = function (d) {\n        return (d != null &&\n                typeof d.resource === \"function\" &&\n                typeof d.tryDispose === \"function\");\n    };\n\n    function FunctionDisposer(fn, promise, context) {\n        this.constructor$(fn, promise, context);\n    }\n    inherits(FunctionDisposer, Disposer);\n\n    FunctionDisposer.prototype.doDispose = function (resource, inspection) {\n        var fn = this.data();\n        return fn.call(resource, resource, inspection);\n    };\n\n    function maybeUnwrapDisposer(value) {\n        if (Disposer.isDisposer(value)) {\n            this.resources[this.index]._setDisposable(value);\n            return value.promise();\n        }\n        return value;\n    }\n\n    function ResourceList(length) {\n        this.length = length;\n        this.promise = null;\n        this[length-1] = null;\n    }\n\n    ResourceList.prototype._resultCancelled = function() {\n        var len = this.length;\n        for (var i = 0; i < len; ++i) {\n            var item = this[i];\n            if (item instanceof Promise) {\n                item.cancel();\n            }\n        }\n    };\n\n    Promise.using = function () {\n        var len = arguments.length;\n        if (len < 2) return apiRejection(\n                        \"you must pass at least 2 arguments to Promise.using\");\n        var fn = arguments[len - 1];\n        if (typeof fn !== \"function\") {\n            return apiRejection(\"expecting a function but got \" + util.classString(fn));\n        }\n        var input;\n        var spreadArgs = true;\n        if (len === 2 && Array.isArray(arguments[0])) {\n            input = arguments[0];\n            len = input.length;\n            spreadArgs = false;\n        } else {\n            input = arguments;\n            len--;\n        }\n        var resources = new ResourceList(len);\n        for (var i = 0; i < len; ++i) {\n            var resource = input[i];\n            if (Disposer.isDisposer(resource)) {\n                var disposer = resource;\n                resource = resource.promise();\n                resource._setDisposable(disposer);\n            } else {\n                var maybePromise = tryConvertToPromise(resource);\n                if (maybePromise instanceof Promise) {\n                    resource =\n                        maybePromise._then(maybeUnwrapDisposer, null, null, {\n                            resources: resources,\n                            index: i\n                    }, undefined);\n                }\n            }\n            resources[i] = resource;\n        }\n\n        var reflectedResources = new Array(resources.length);\n        for (var i = 0; i < reflectedResources.length; ++i) {\n            reflectedResources[i] = Promise.resolve(resources[i]).reflect();\n        }\n\n        var resultPromise = Promise.all(reflectedResources)\n            .then(function(inspections) {\n                for (var i = 0; i < inspections.length; ++i) {\n                    var inspection = inspections[i];\n                    if (inspection.isRejected()) {\n                        errorObj.e = inspection.error();\n                        return errorObj;\n                    } else if (!inspection.isFulfilled()) {\n                        resultPromise.cancel();\n                        return;\n                    }\n                    inspections[i] = inspection.value();\n                }\n                promise._pushContext();\n\n                fn = tryCatch(fn);\n                var ret = spreadArgs\n                    ? fn.apply(undefined, inspections) : fn(inspections);\n                var promiseCreated = promise._popContext();\n                debug.checkForgottenReturns(\n                    ret, promiseCreated, \"Promise.using\", promise);\n                return ret;\n            });\n\n        var promise = resultPromise.lastly(function() {\n            var inspection = new Promise.PromiseInspection(resultPromise);\n            return dispose(resources, inspection);\n        });\n        resources.promise = promise;\n        promise._setOnCancel(resources);\n        return promise;\n    };\n\n    Promise.prototype._setDisposable = function (disposer) {\n        this._bitField = this._bitField | 131072;\n        this._disposer = disposer;\n    };\n\n    Promise.prototype._isDisposable = function () {\n        return (this._bitField & 131072) > 0;\n    };\n\n    Promise.prototype._getDisposer = function () {\n        return this._disposer;\n    };\n\n    Promise.prototype._unsetDisposable = function () {\n        this._bitField = this._bitField & (~131072);\n        this._disposer = undefined;\n    };\n\n    Promise.prototype.disposer = function (fn) {\n        if (typeof fn === \"function\") {\n            return new FunctionDisposer(fn, this, createContext());\n        }\n        throw new TypeError();\n    };\n\n};\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "111",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/using.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 7591,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 7589,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 7585,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "thrower",
          "ranges": [
            {
              "startOffset": 409,
              "endOffset": 481,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "castPreservingDisposable",
          "ranges": [
            {
              "startOffset": 487,
              "endOffset": 901,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "dispose",
          "ranges": [
            {
              "startOffset": 906,
              "endOffset": 1876,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Disposer",
          "ranges": [
            {
              "startOffset": 1882,
              "endOffset": 2024,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Disposer.data",
          "ranges": [
            {
              "startOffset": 2056,
              "endOffset": 2102,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Disposer.promise",
          "ranges": [
            {
              "startOffset": 2138,
              "endOffset": 2187,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Disposer.resource",
          "ranges": [
            {
              "startOffset": 2224,
              "endOffset": 2361,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Disposer.tryDispose",
          "ranges": [
            {
              "startOffset": 2400,
              "endOffset": 2806,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Disposer.isDisposer",
          "ranges": [
            {
              "startOffset": 2835,
              "endOffset": 2989,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "FunctionDisposer",
          "ranges": [
            {
              "startOffset": 2996,
              "endOffset": 3100,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "FunctionDisposer.doDispose",
          "ranges": [
            {
              "startOffset": 3187,
              "endOffset": 3312,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeUnwrapDisposer",
          "ranges": [
            {
              "startOffset": 3319,
              "endOffset": 3534,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ResourceList",
          "ranges": [
            {
              "startOffset": 3540,
              "endOffset": 3667,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ResourceList._resultCancelled",
          "ranges": [
            {
              "startOffset": 3715,
              "endOffset": 3934,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.using",
          "ranges": [
            {
              "startOffset": 3957,
              "endOffset": 6873,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._setDisposable",
          "ranges": [
            {
              "startOffset": 6915,
              "endOffset": 7027,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._isDisposable",
          "ranges": [
            {
              "startOffset": 7068,
              "endOffset": 7133,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._getDisposer",
          "ranges": [
            {
              "startOffset": 7173,
              "endOffset": 7223,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise._unsetDisposable",
          "ranges": [
            {
              "startOffset": 7267,
              "endOffset": 7375,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "Promise.disposer",
          "ranges": [
            {
              "startOffset": 7411,
              "endOffset": 7581,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { \"use strict\";\nvar es5 = require(\"./es5\");\nvar canEvaluate = typeof navigator == \"undefined\";\n\nvar errorObj = {e: {}};\nvar tryCatchTarget;\nvar globalObject = typeof self !== \"undefined\" ? self :\n    typeof window !== \"undefined\" ? window :\n    typeof global !== \"undefined\" ? global :\n    this !== undefined ? this : null;\n\nfunction tryCatcher() {\n    try {\n        var target = tryCatchTarget;\n        tryCatchTarget = null;\n        return target.apply(this, arguments);\n    } catch (e) {\n        errorObj.e = e;\n        return errorObj;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n\nvar inherits = function(Child, Parent) {\n    var hasProp = {}.hasOwnProperty;\n\n    function T() {\n        this.constructor = Child;\n        this.constructor$ = Parent;\n        for (var propertyName in Parent.prototype) {\n            if (hasProp.call(Parent.prototype, propertyName) &&\n                propertyName.charAt(propertyName.length-1) !== \"$\"\n           ) {\n                this[propertyName + \"$\"] = Parent.prototype[propertyName];\n            }\n        }\n    }\n    T.prototype = Parent.prototype;\n    Child.prototype = new T();\n    return Child.prototype;\n};\n\n\nfunction isPrimitive(val) {\n    return val == null || val === true || val === false ||\n        typeof val === \"string\" || typeof val === \"number\";\n\n}\n\nfunction isObject(value) {\n    return typeof value === \"function\" ||\n           typeof value === \"object\" && value !== null;\n}\n\nfunction maybeWrapAsError(maybeError) {\n    if (!isPrimitive(maybeError)) return maybeError;\n\n    return new Error(safeToString(maybeError));\n}\n\nfunction withAppended(target, appendee) {\n    var len = target.length;\n    var ret = new Array(len + 1);\n    var i;\n    for (i = 0; i < len; ++i) {\n        ret[i] = target[i];\n    }\n    ret[i] = appendee;\n    return ret;\n}\n\nfunction getDataPropertyOrDefault(obj, key, defaultValue) {\n    if (es5.isES5) {\n        var desc = Object.getOwnPropertyDescriptor(obj, key);\n\n        if (desc != null) {\n            return desc.get == null && desc.set == null\n                    ? desc.value\n                    : defaultValue;\n        }\n    } else {\n        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;\n    }\n}\n\nfunction notEnumerableProp(obj, name, value) {\n    if (isPrimitive(obj)) return obj;\n    var descriptor = {\n        value: value,\n        configurable: true,\n        enumerable: false,\n        writable: true\n    };\n    es5.defineProperty(obj, name, descriptor);\n    return obj;\n}\n\nfunction thrower(r) {\n    throw r;\n}\n\nvar inheritedDataKeys = (function() {\n    var excludedPrototypes = [\n        Array.prototype,\n        Object.prototype,\n        Function.prototype\n    ];\n\n    var isExcludedProto = function(val) {\n        for (var i = 0; i < excludedPrototypes.length; ++i) {\n            if (excludedPrototypes[i] === val) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    if (es5.isES5) {\n        var getKeys = Object.getOwnPropertyNames;\n        return function(obj) {\n            var ret = [];\n            var visitedKeys = Object.create(null);\n            while (obj != null && !isExcludedProto(obj)) {\n                var keys;\n                try {\n                    keys = getKeys(obj);\n                } catch (e) {\n                    return ret;\n                }\n                for (var i = 0; i < keys.length; ++i) {\n                    var key = keys[i];\n                    if (visitedKeys[key]) continue;\n                    visitedKeys[key] = true;\n                    var desc = Object.getOwnPropertyDescriptor(obj, key);\n                    if (desc != null && desc.get == null && desc.set == null) {\n                        ret.push(key);\n                    }\n                }\n                obj = es5.getPrototypeOf(obj);\n            }\n            return ret;\n        };\n    } else {\n        var hasProp = {}.hasOwnProperty;\n        return function(obj) {\n            if (isExcludedProto(obj)) return [];\n            var ret = [];\n\n            /*jshint forin:false */\n            enumeration: for (var key in obj) {\n                if (hasProp.call(obj, key)) {\n                    ret.push(key);\n                } else {\n                    for (var i = 0; i < excludedPrototypes.length; ++i) {\n                        if (hasProp.call(excludedPrototypes[i], key)) {\n                            continue enumeration;\n                        }\n                    }\n                    ret.push(key);\n                }\n            }\n            return ret;\n        };\n    }\n\n})();\n\nvar thisAssignmentPattern = /this\\s*\\.\\s*\\S+\\s*=/;\nfunction isClass(fn) {\n    try {\n        if (typeof fn === \"function\") {\n            var keys = es5.names(fn.prototype);\n\n            var hasMethods = es5.isES5 && keys.length > 1;\n            var hasMethodsOtherThanConstructor = keys.length > 0 &&\n                !(keys.length === 1 && keys[0] === \"constructor\");\n            var hasThisAssignmentAndStaticMethods =\n                thisAssignmentPattern.test(fn + \"\") && es5.names(fn).length > 0;\n\n            if (hasMethods || hasMethodsOtherThanConstructor ||\n                hasThisAssignmentAndStaticMethods) {\n                return true;\n            }\n        }\n        return false;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction toFastProperties(obj) {\n    /*jshint -W027,-W055,-W031*/\n    function FakeConstructor() {}\n    FakeConstructor.prototype = obj;\n    var receiver = new FakeConstructor();\n    function ic() {\n        return typeof receiver.foo;\n    }\n    ic();\n    ic();\n    return obj;\n    eval(obj);\n}\n\nvar rident = /^[a-z$_][a-z$_0-9]*$/i;\nfunction isIdentifier(str) {\n    return rident.test(str);\n}\n\nfunction filledRange(count, prefix, suffix) {\n    var ret = new Array(count);\n    for(var i = 0; i < count; ++i) {\n        ret[i] = prefix + i + suffix;\n    }\n    return ret;\n}\n\nfunction safeToString(obj) {\n    try {\n        return obj + \"\";\n    } catch (e) {\n        return \"[no string representation]\";\n    }\n}\n\nfunction isError(obj) {\n    return obj instanceof Error ||\n        (obj !== null &&\n           typeof obj === \"object\" &&\n           typeof obj.message === \"string\" &&\n           typeof obj.name === \"string\");\n}\n\nfunction markAsOriginatingFromRejection(e) {\n    try {\n        notEnumerableProp(e, \"isOperational\", true);\n    }\n    catch(ignore) {}\n}\n\nfunction originatesFromRejection(e) {\n    if (e == null) return false;\n    return ((e instanceof Error[\"__BluebirdErrorTypes__\"].OperationalError) ||\n        e[\"isOperational\"] === true);\n}\n\nfunction canAttachTrace(obj) {\n    return isError(obj) && es5.propertyIsWritable(obj, \"stack\");\n}\n\nvar ensureErrorObject = (function() {\n    if (!(\"stack\" in new Error())) {\n        return function(value) {\n            if (canAttachTrace(value)) return value;\n            try {throw new Error(safeToString(value));}\n            catch(err) {return err;}\n        };\n    } else {\n        return function(value) {\n            if (canAttachTrace(value)) return value;\n            return new Error(safeToString(value));\n        };\n    }\n})();\n\nfunction classString(obj) {\n    return {}.toString.call(obj);\n}\n\nfunction copyDescriptors(from, to, filter) {\n    var keys = es5.names(from);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        if (filter(key)) {\n            try {\n                es5.defineProperty(to, key, es5.getDescriptor(from, key));\n            } catch (ignore) {}\n        }\n    }\n}\n\nvar asArray = function(v) {\n    if (es5.isArray(v)) {\n        return v;\n    }\n    return null;\n};\n\nif (typeof Symbol !== \"undefined\" && Symbol.iterator) {\n    var ArrayFrom = typeof Array.from === \"function\" ? function(v) {\n        return Array.from(v);\n    } : function(v) {\n        var ret = [];\n        var it = v[Symbol.iterator]();\n        var itResult;\n        while (!((itResult = it.next()).done)) {\n            ret.push(itResult.value);\n        }\n        return ret;\n    };\n\n    asArray = function(v) {\n        if (es5.isArray(v)) {\n            return v;\n        } else if (v != null && typeof v[Symbol.iterator] === \"function\") {\n            return ArrayFrom(v);\n        }\n        return null;\n    };\n}\n\nvar isNode = typeof process !== \"undefined\" &&\n        classString(process).toLowerCase() === \"[object process]\";\n\nvar hasEnvVariables = typeof process !== \"undefined\" &&\n    typeof process.env !== \"undefined\";\n\nfunction env(key) {\n    return hasEnvVariables ? process.env[key] : undefined;\n}\n\nfunction getNativePromise() {\n    if (typeof Promise === \"function\") {\n        try {\n            var promise = new Promise(function(){});\n            if ({}.toString.call(promise) === \"[object Promise]\") {\n                return Promise;\n            }\n        } catch (e) {}\n    }\n}\n\nfunction domainBind(self, cb) {\n    return self.bind(cb);\n}\n\nvar ret = {\n    isClass: isClass,\n    isIdentifier: isIdentifier,\n    inheritedDataKeys: inheritedDataKeys,\n    getDataPropertyOrDefault: getDataPropertyOrDefault,\n    thrower: thrower,\n    isArray: es5.isArray,\n    asArray: asArray,\n    notEnumerableProp: notEnumerableProp,\n    isPrimitive: isPrimitive,\n    isObject: isObject,\n    isError: isError,\n    canEvaluate: canEvaluate,\n    errorObj: errorObj,\n    tryCatch: tryCatch,\n    inherits: inherits,\n    withAppended: withAppended,\n    maybeWrapAsError: maybeWrapAsError,\n    toFastProperties: toFastProperties,\n    filledRange: filledRange,\n    toString: safeToString,\n    canAttachTrace: canAttachTrace,\n    ensureErrorObject: ensureErrorObject,\n    originatesFromRejection: originatesFromRejection,\n    markAsOriginatingFromRejection: markAsOriginatingFromRejection,\n    classString: classString,\n    copyDescriptors: copyDescriptors,\n    hasDevTools: typeof chrome !== \"undefined\" && chrome &&\n                 typeof chrome.loadTimes === \"function\",\n    isNode: isNode,\n    hasEnvVariables: hasEnvVariables,\n    env: env,\n    global: globalObject,\n    getNativePromise: getNativePromise,\n    domainBind: domainBind\n};\nret.isRecentNode = ret.isNode && (function() {\n    var version = process.versions.node.split(\".\").map(Number);\n    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);\n})();\n\nif (ret.isNode) ret.toFastProperties(process);\n\ntry {throw new Error(); } catch (e) {ret.lastLineError = e;}\nmodule.exports = ret;\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "66",
      "url": "/data/projects/web/istanbulify/node_modules/bluebird/js/release/util.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 10420,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 10418,
              "count": 1
            },
            {
              "startOffset": 247,
              "endOffset": 253,
              "count": 0
            },
            {
              "startOffset": 290,
              "endOffset": 298,
              "count": 0
            },
            {
              "startOffset": 344,
              "endOffset": 382,
              "count": 0
            },
            {
              "startOffset": 7827,
              "endOffset": 8048,
              "count": 0
            },
            {
              "startOffset": 9859,
              "endOffset": 9868,
              "count": 0
            },
            {
              "startOffset": 9869,
              "endOffset": 9927,
              "count": 0
            },
            {
              "startOffset": 10356,
              "endOffset": 10359,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryCatcher",
          "ranges": [
            {
              "startOffset": 385,
              "endOffset": 607,
              "count": 1
            },
            {
              "startOffset": 532,
              "endOffset": 606,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryCatch",
          "ranges": [
            {
              "startOffset": 608,
              "endOffset": 681,
              "count": 1
            },
            {
              "startOffset": 679,
              "endOffset": 680,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "inherits",
          "ranges": [
            {
              "startOffset": 698,
              "endOffset": 1251,
              "count": 14
            },
            {
              "startOffset": 1249,
              "endOffset": 1250,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "T",
          "ranges": [
            {
              "startOffset": 766,
              "endOffset": 1154,
              "count": 14
            },
            {
              "startOffset": 902,
              "endOffset": 1148,
              "count": 84
            },
            {
              "startOffset": 1048,
              "endOffset": 1138,
              "count": 79
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isPrimitive",
          "ranges": [
            {
              "startOffset": 1255,
              "endOffset": 1404,
              "count": 3
            },
            {
              "startOffset": 1401,
              "endOffset": 1403,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isObject",
          "ranges": [
            {
              "startOffset": 1406,
              "endOffset": 1532,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeWrapAsError",
          "ranges": [
            {
              "startOffset": 1534,
              "endOffset": 1677,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "withAppended",
          "ranges": [
            {
              "startOffset": 1679,
              "endOffset": 1901,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDataPropertyOrDefault",
          "ranges": [
            {
              "startOffset": 1903,
              "endOffset": 2302,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "notEnumerableProp",
          "ranges": [
            {
              "startOffset": 2304,
              "endOffset": 2583,
              "count": 3
            },
            {
              "startOffset": 2377,
              "endOffset": 2388,
              "count": 0
            },
            {
              "startOffset": 2581,
              "endOffset": 2582,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "thrower",
          "ranges": [
            {
              "startOffset": 2585,
              "endOffset": 2621,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2648,
              "endOffset": 4647,
              "count": 1
            },
            {
              "startOffset": 3941,
              "endOffset": 4646,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isExcludedProto",
          "ranges": [
            {
              "startOffset": 2804,
              "endOffset": 3011,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "hasProp",
          "ranges": [
            {
              "startOffset": 3100,
              "endOffset": 3940,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4011,
              "endOffset": 4637,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isClass",
          "ranges": [
            {
              "startOffset": 4704,
              "endOffset": 5393,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "toFastProperties",
          "ranges": [
            {
              "startOffset": 5395,
              "endOffset": 5688,
              "count": 3
            },
            {
              "startOffset": 5671,
              "endOffset": 5687,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "FakeConstructor",
          "ranges": [
            {
              "startOffset": 5465,
              "endOffset": 5494,
              "count": 3
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "ic",
          "ranges": [
            {
              "startOffset": 5578,
              "endOffset": 5635,
              "count": 6
            },
            {
              "startOffset": 5629,
              "endOffset": 5634,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isIdentifier",
          "ranges": [
            {
              "startOffset": 5728,
              "endOffset": 5787,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "filledRange",
          "ranges": [
            {
              "startOffset": 5789,
              "endOffset": 5965,
              "count": 5
            },
            {
              "startOffset": 5902,
              "endOffset": 5947,
              "count": 9
            },
            {
              "startOffset": 5963,
              "endOffset": 5964,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "safeToString",
          "ranges": [
            {
              "startOffset": 5967,
              "endOffset": 6101,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isError",
          "ranges": [
            {
              "startOffset": 6103,
              "endOffset": 6314,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "markAsOriginatingFromRejection",
          "ranges": [
            {
              "startOffset": 6316,
              "endOffset": 6452,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "originatesFromRejection",
          "ranges": [
            {
              "startOffset": 6454,
              "endOffset": 6643,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "canAttachTrace",
          "ranges": [
            {
              "startOffset": 6645,
              "endOffset": 6742,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6769,
              "endOffset": 7177,
              "count": 1
            },
            {
              "startOffset": 6817,
              "endOffset": 7014,
              "count": 0
            },
            {
              "startOffset": 7175,
              "endOffset": 7176,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "asArray",
          "ranges": [
            {
              "startOffset": 6834,
              "endOffset": 7007,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7037,
              "endOffset": 7168,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "classString",
          "ranges": [
            {
              "startOffset": 7183,
              "endOffset": 7246,
              "count": 1
            },
            {
              "startOffset": 7244,
              "endOffset": 7245,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "copyDescriptors",
          "ranges": [
            {
              "startOffset": 7248,
              "endOffset": 7565,
              "count": 1
            },
            {
              "startOffset": 7367,
              "endOffset": 7563,
              "count": 5
            },
            {
              "startOffset": 7421,
              "endOffset": 7557,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "asArray",
          "ranges": [
            {
              "startOffset": 7581,
              "endOffset": 7663,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayFrom",
          "ranges": [
            {
              "startOffset": 7777,
              "endOffset": 7826,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayFrom",
          "ranges": [
            {
              "startOffset": 7829,
              "endOffset": 8048,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "asArray",
          "ranges": [
            {
              "startOffset": 8065,
              "endOffset": 8276,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "env",
          "ranges": [
            {
              "startOffset": 8493,
              "endOffset": 8573,
              "count": 9
            },
            {
              "startOffset": 8559,
              "endOffset": 8570,
              "count": 0
            },
            {
              "startOffset": 8571,
              "endOffset": 8572,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getNativePromise",
          "ranges": [
            {
              "startOffset": 8575,
              "endOffset": 8857,
              "count": 1
            },
            {
              "startOffset": 8812,
              "endOffset": 8856,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 8698,
              "endOffset": 8710,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "domainBind",
          "ranges": [
            {
              "startOffset": 8859,
              "endOffset": 8918,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 10131,
              "endOffset": 10279,
              "count": 1
            },
            {
              "startOffset": 10237,
              "endOffset": 10255,
              "count": 0
            },
            {
              "startOffset": 10277,
              "endOffset": 10278,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        }
      ]
    }
  },
  {
    "sourceText": "(function (exports, require, module, __filename, __dirname) { const Bluebird = require(\"bluebird\");\nconst fs = require(\"fs\");\n\nreadTextFileAsync = Bluebird.promisify(function (params, cb) {\n  fs.readFile(params, \"UTF-8\", cb);\n});\n\nreadTextFileAsync(\"./main.js\")\n\n});",
    "sourceType": "script",
    "scriptCov": {
      "scriptId": "63",
      "url": "/main.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 266,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1,
              "endOffset": 264,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 166,
              "endOffset": 227,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        }
      ]
    }
  }
]
